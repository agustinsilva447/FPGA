// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _counter_HH_
#define _counter_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct counter : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<32> > a_q0;
    sc_in< sc_lv<32> > k;
    sc_in< sc_lv<32> > u_0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    counter(sc_module_name name);
    SC_HAS_PROCESS(counter);

    ~counter();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > count_0_reg_118;
    sc_signal< sc_lv<4> > j_0_reg_130;
    sc_signal< sc_lv<1> > icmp_ln6_fu_154_p2;
    sc_signal< sc_lv<1> > icmp_ln6_reg_291;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_fu_160_p2;
    sc_signal< sc_lv<4> > i_reg_295;
    sc_signal< sc_lv<1> > icmp_ln19_fu_177_p2;
    sc_signal< sc_lv<1> > icmp_ln19_reg_308;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln21_fu_183_p2;
    sc_signal< sc_lv<1> > icmp_ln21_reg_312;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<4> > j_fu_189_p2;
    sc_signal< sc_lv<4> > j_reg_316;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<32> > select_ln23_1_fu_261_p3;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<32> > u_fu_274_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > icmp_ln27_fu_269_p2;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state6;
    sc_signal< sc_lv<4> > i_0_i_reg_83;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln8_fu_171_p2;
    sc_signal< sc_lv<4> > f_reg_95;
    sc_signal< sc_lv<32> > u_0_7_reg_108;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<4> > ap_phi_mux_j_0_phi_fu_134_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_p_0_phi_fu_146_p4;
    sc_signal< sc_lv<32> > p_0_reg_142;
    sc_signal< sc_lv<64> > zext_ln8_fu_166_p1;
    sc_signal< sc_lv<64> > zext_ln23_fu_195_p1;
    sc_signal< sc_lv<32> > sub_ln23_fu_210_p2;
    sc_signal< sc_lv<1> > abscond_fu_222_p2;
    sc_signal< sc_lv<32> > neg_fu_216_p2;
    sc_signal< sc_lv<32> > zext_ln21_fu_200_p1;
    sc_signal< sc_lv<32> > abs_fu_228_p3;
    sc_signal< sc_lv<32> > sub_ln23_1_fu_236_p2;
    sc_signal< sc_lv<1> > icmp_ln23_1_fu_241_p2;
    sc_signal< sc_lv<32> > count_fu_247_p2;
    sc_signal< sc_lv<1> > icmp_ln23_fu_204_p2;
    sc_signal< sc_lv<32> > select_ln23_fu_253_p3;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_pp1_stage0;
    static const sc_lv<7> ap_ST_fsm_state8;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_9;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_abs_fu_228_p3();
    void thread_abscond_fu_222_p2();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state6_pp1_stage0_iter0();
    void thread_ap_block_state7_pp1_stage0_iter1();
    void thread_ap_condition_pp1_exit_iter0_state6();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_j_0_phi_fu_134_p4();
    void thread_ap_phi_mux_p_0_phi_fu_146_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_count_fu_247_p2();
    void thread_i_fu_160_p2();
    void thread_icmp_ln19_fu_177_p2();
    void thread_icmp_ln21_fu_183_p2();
    void thread_icmp_ln23_1_fu_241_p2();
    void thread_icmp_ln23_fu_204_p2();
    void thread_icmp_ln27_fu_269_p2();
    void thread_icmp_ln6_fu_154_p2();
    void thread_icmp_ln8_fu_171_p2();
    void thread_j_fu_189_p2();
    void thread_neg_fu_216_p2();
    void thread_select_ln23_1_fu_261_p3();
    void thread_select_ln23_fu_253_p3();
    void thread_sub_ln23_1_fu_236_p2();
    void thread_sub_ln23_fu_210_p2();
    void thread_u_fu_274_p2();
    void thread_zext_ln21_fu_200_p1();
    void thread_zext_ln23_fu_195_p1();
    void thread_zext_ln8_fu_166_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
