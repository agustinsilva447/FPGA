// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _nqueens_HH_
#define _nqueens_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "counter.h"
#include "find_0.h"
#include "nqueens_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct nqueens : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    nqueens(sc_module_name name);
    SC_HAS_PROCESS(nqueens);

    ~nqueens();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    nqueens_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* nqueens_AXILiteS_s_axi_U;
    counter* grp_counter_fu_128;
    find_0* grp_find_0_fu_138;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<3> > a_address0;
    sc_signal< sc_logic > a_ce0;
    sc_signal< sc_logic > a_we0;
    sc_signal< sc_lv<32> > a_d0;
    sc_signal< sc_lv<32> > a_q0;
    sc_signal< sc_lv<32> > k_i;
    sc_signal< sc_lv<32> > k_o;
    sc_signal< sc_logic > k_o_ap_vld;
    sc_signal< sc_lv<32> > u_0_i;
    sc_signal< sc_lv<32> > u_0_o;
    sc_signal< sc_logic > u_0_o_ap_vld;
    sc_signal< sc_lv<32> > sol_list_i;
    sc_signal< sc_lv<32> > sol_list_o;
    sc_signal< sc_logic > sol_list_o_ap_vld;
    sc_signal< sc_logic > flag_ap_vld;
    sc_signal< sc_lv<32> > k_read_reg_202;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > u_0_read_reg_211;
    sc_signal< sc_lv<32> > grp_counter_fu_128_ap_return;
    sc_signal< sc_lv<32> > tmp_reg_216;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > grp_counter_fu_128_ap_ready;
    sc_signal< sc_logic > grp_counter_fu_128_ap_done;
    sc_signal< sc_lv<1> > icmp_ln45_fu_148_p2;
    sc_signal< sc_lv<1> > icmp_ln45_reg_222;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln47_fu_159_p2;
    sc_signal< sc_lv<1> > icmp_ln47_reg_226;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > grp_find_0_fu_138_ap_ready;
    sc_signal< sc_logic > grp_find_0_fu_138_ap_done;
    sc_signal< sc_lv<3> > a_addr_1_reg_230;
    sc_signal< sc_lv<32> > add_ln53_fu_177_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > grp_counter_fu_128_ap_start;
    sc_signal< sc_logic > grp_counter_fu_128_ap_idle;
    sc_signal< sc_lv<3> > grp_counter_fu_128_a_address0;
    sc_signal< sc_logic > grp_counter_fu_128_a_ce0;
    sc_signal< sc_logic > grp_find_0_fu_138_ap_start;
    sc_signal< sc_logic > grp_find_0_fu_138_ap_idle;
    sc_signal< sc_lv<3> > grp_find_0_fu_138_a_address0;
    sc_signal< sc_logic > grp_find_0_fu_138_a_ce0;
    sc_signal< sc_lv<4> > grp_find_0_fu_138_ap_return;
    sc_signal< sc_lv<32> > empty_2_reg_119;
    sc_signal< sc_logic > grp_counter_fu_128_ap_start_reg;
    sc_signal< sc_logic > grp_find_0_fu_138_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<64> > sext_ln43_fu_144_p1;
    sc_signal< sc_lv<64> > sext_ln51_fu_165_p1;
    sc_signal< sc_lv<32> > add_ln51_fu_170_p2;
    sc_signal< sc_lv<32> > add_ln46_fu_153_p2;
    sc_signal< sc_lv<32> > add_ln55_fu_182_p2;
    sc_signal< bool > ap_predicate_op56_call_state10;
    sc_signal< bool > ap_block_state10_on_subcall_done;
    sc_signal< sc_lv<1> > icmp_ln56_fu_189_p2;
    sc_signal< sc_lv<32> > add_ln57_fu_195_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFFE;
    static const sc_lv<4> ap_const_lv4_8;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_a_d0();
    void thread_a_we0();
    void thread_add_ln46_fu_153_p2();
    void thread_add_ln51_fu_170_p2();
    void thread_add_ln53_fu_177_p2();
    void thread_add_ln55_fu_182_p2();
    void thread_add_ln57_fu_195_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state10_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op56_call_state10();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_flag_ap_vld();
    void thread_grp_counter_fu_128_ap_start();
    void thread_grp_find_0_fu_138_ap_start();
    void thread_icmp_ln45_fu_148_p2();
    void thread_icmp_ln47_fu_159_p2();
    void thread_icmp_ln56_fu_189_p2();
    void thread_k_o();
    void thread_k_o_ap_vld();
    void thread_sext_ln43_fu_144_p1();
    void thread_sext_ln51_fu_165_p1();
    void thread_sol_list_o();
    void thread_sol_list_o_ap_vld();
    void thread_u_0_o();
    void thread_u_0_o_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
