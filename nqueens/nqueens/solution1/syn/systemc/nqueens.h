// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _nqueens_HH_
#define _nqueens_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "nqueens_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct nqueens : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    nqueens(sc_module_name name);
    SC_HAS_PROCESS(nqueens);

    ~nqueens();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    nqueens_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* nqueens_AXILiteS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<3> > a_address0;
    sc_signal< sc_logic > a_ce0;
    sc_signal< sc_logic > a_we0;
    sc_signal< sc_lv<32> > a_d0;
    sc_signal< sc_lv<32> > a_q0;
    sc_signal< sc_lv<32> > k_i;
    sc_signal< sc_logic > k_o_ap_vld;
    sc_signal< sc_lv<32> > u_0_i;
    sc_signal< sc_lv<32> > u_0_o;
    sc_signal< sc_logic > u_0_o_ap_vld;
    sc_signal< sc_lv<32> > sol_list_i;
    sc_signal< sc_lv<32> > sol_list_o;
    sc_signal< sc_logic > sol_list_o_ap_vld;
    sc_signal< sc_logic > flag_ap_vld;
    sc_signal< sc_lv<32> > count_0_i_reg_149;
    sc_signal< sc_lv<31> > j_0_i_reg_161;
    sc_signal< sc_lv<32> > k_read_reg_378;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln7_fu_219_p2;
    sc_signal< sc_lv<1> > icmp_ln7_reg_395;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > zext_ln9_fu_225_p1;
    sc_signal< sc_lv<32> > zext_ln9_reg_399;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln9_fu_229_p2;
    sc_signal< sc_lv<1> > icmp_ln9_reg_404;
    sc_signal< sc_lv<31> > j_fu_234_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > select_ln11_1_fu_301_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > u_1_fu_314_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > icmp_ln15_fu_309_p2;
    sc_signal< sc_lv<1> > icmp_ln34_fu_324_p2;
    sc_signal< sc_lv<1> > icmp_ln34_reg_431;
    sc_signal< sc_lv<3> > a_addr_1_reg_438;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< sc_lv<32> > u_0_i_reg_139;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > ap_phi_mux_p_0_i_phi_fu_176_p4;
    sc_signal< sc_lv<32> > p_0_i_reg_172;
    sc_signal< sc_lv<1> > exit_1_reg_185;
    sc_signal< sc_lv<1> > icmp_ln36_fu_335_p2;
    sc_signal< sc_lv<32> > add_ln42_fu_352_p2;
    sc_signal< sc_lv<32> > ap_phi_mux_empty_3_phi_fu_201_p4;
    sc_signal< sc_lv<32> > empty_3_reg_198;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > ap_phi_mux_exit_2_phi_fu_211_p4;
    sc_signal< sc_lv<1> > exit_2_reg_207;
    sc_signal< sc_lv<64> > zext_ln11_fu_240_p1;
    sc_signal< sc_lv<64> > sext_ln32_fu_320_p1;
    sc_signal< sc_lv<64> > sext_ln40_fu_340_p1;
    sc_signal< sc_lv<32> > add_ln40_fu_345_p2;
    sc_signal< sc_lv<32> > add_ln44_fu_358_p2;
    sc_signal< sc_lv<1> > icmp_ln45_fu_365_p2;
    sc_signal< sc_lv<32> > add_ln46_fu_371_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > sub_ln11_fu_251_p2;
    sc_signal< sc_lv<1> > abscond_i_fu_263_p2;
    sc_signal< sc_lv<32> > neg_i_fu_257_p2;
    sc_signal< sc_lv<32> > abs_i_fu_269_p3;
    sc_signal< sc_lv<32> > sub_ln11_1_fu_277_p2;
    sc_signal< sc_lv<1> > icmp_ln11_1_fu_281_p2;
    sc_signal< sc_lv<32> > count_fu_287_p2;
    sc_signal< sc_lv<1> > icmp_ln11_fu_245_p2;
    sc_signal< sc_lv<32> > select_ln11_fu_293_p3;
    sc_signal< sc_lv<32> > add_ln35_fu_330_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_199;
    sc_signal< bool > ap_condition_204;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<7> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_FFFFFFFE;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_a_d0();
    void thread_a_we0();
    void thread_abs_i_fu_269_p3();
    void thread_abscond_i_fu_263_p2();
    void thread_add_ln35_fu_330_p2();
    void thread_add_ln40_fu_345_p2();
    void thread_add_ln42_fu_352_p2();
    void thread_add_ln44_fu_358_p2();
    void thread_add_ln46_fu_371_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_condition_199();
    void thread_ap_condition_204();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_empty_3_phi_fu_201_p4();
    void thread_ap_phi_mux_exit_2_phi_fu_211_p4();
    void thread_ap_phi_mux_p_0_i_phi_fu_176_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_count_fu_287_p2();
    void thread_flag_ap_vld();
    void thread_icmp_ln11_1_fu_281_p2();
    void thread_icmp_ln11_fu_245_p2();
    void thread_icmp_ln15_fu_309_p2();
    void thread_icmp_ln34_fu_324_p2();
    void thread_icmp_ln36_fu_335_p2();
    void thread_icmp_ln45_fu_365_p2();
    void thread_icmp_ln7_fu_219_p2();
    void thread_icmp_ln9_fu_229_p2();
    void thread_j_fu_234_p2();
    void thread_k_o_ap_vld();
    void thread_neg_i_fu_257_p2();
    void thread_select_ln11_1_fu_301_p3();
    void thread_select_ln11_fu_293_p3();
    void thread_sext_ln32_fu_320_p1();
    void thread_sext_ln40_fu_340_p1();
    void thread_sol_list_o();
    void thread_sol_list_o_ap_vld();
    void thread_sub_ln11_1_fu_277_p2();
    void thread_sub_ln11_fu_251_p2();
    void thread_u_0_o();
    void thread_u_0_o_ap_vld();
    void thread_u_1_fu_314_p2();
    void thread_zext_ln11_fu_240_p1();
    void thread_zext_ln9_fu_225_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
