-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nqueens is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (31 downto 0);
    n_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    u_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sol_list : IN STD_LOGIC_VECTOR (31 downto 0);
    flag : IN STD_LOGIC );
end;


architecture behav of nqueens is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nqueens,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.149000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=273,HLS_SYN_LUT=784,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln8_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln8_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln8_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln10_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln10_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_fu_199_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_380 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln10_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_fu_216_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln15_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_1_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal n_0_assign_2_load_1_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln27_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln30_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal k_assign_2_reg_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_0_i_reg_114 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal count_0_i_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i_reg_138 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_p_0_i_phi_fu_153_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0_i_reg_149 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_1_reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln25_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_0_assign_2_fu_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln11_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_i_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_i_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_i_fu_254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln11_1_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_1_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_fu_279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln27_fu_295_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_0_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                count_0_i_reg_126 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                count_0_i_reg_126 <= select_ln11_1_fu_287_p3;
            end if; 
        end if;
    end process;

    j_0_i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_i_reg_138 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_i_reg_138 <= j_reg_380;
            end if; 
        end if;
    end process;

    k_assign_2_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (((icmp_ln27_reg_414 = ap_const_lv1_0) and (icmp_ln40_fu_344_p2 = ap_const_lv1_0)) or ((icmp_ln40_fu_344_p2 = ap_const_lv1_0) and (icmp_ln30_reg_418 = ap_const_lv1_0))))) then 
                k_assign_2_reg_104 <= add_ln39_fu_338_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_assign_2_reg_104 <= k;
            end if; 
        end if;
    end process;

    n_0_assign_2_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_311_p2 = ap_const_lv1_0) and (icmp_ln27_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                n_0_assign_2_fu_50 <= add_ln36_fu_322_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_0_assign_2_fu_50 <= n_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln15_fu_210_p2 = ap_const_lv1_1) and (icmp_ln8_reg_368 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0_i_reg_149 <= u_0_i_reg_114;
            elsif (((icmp_ln8_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0_i_reg_149 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((icmp_ln27_fu_300_p2 = ap_const_lv1_0)) then 
                    p_1_reg_161 <= k_assign_2_reg_104;
                elsif (((icmp_ln30_fu_311_p2 = ap_const_lv1_0) and (icmp_ln27_fu_300_p2 = ap_const_lv1_1))) then 
                    p_1_reg_161 <= add_ln37_fu_327_p2;
                end if;
            end if; 
        end if;
    end process;

    u_0_i_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_210_p2 = ap_const_lv1_0) and (icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln8_reg_368 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                u_0_i_reg_114 <= u_fu_216_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                u_0_i_reg_114 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln27_reg_414 <= icmp_ln27_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln30_reg_418 <= icmp_ln30_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln8_reg_368 <= icmp_ln8_fu_183_p2;
                    zext_ln8_reg_362(2 downto 0) <= zext_ln8_fu_179_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_reg_368 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                j_reg_380 <= j_fu_199_p2;
                    zext_ln10_reg_372(30 downto 0) <= zext_ln10_fu_189_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_0_assign_2_load_1_reg_403 <= n_0_assign_2_fu_50;
            end if;
        end if;
    end process;
    zext_ln8_reg_362(31 downto 3) <= "00000000000000000000000000000";
    zext_ln10_reg_372(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_reg_368, ap_CS_fsm_state4, icmp_ln10_fu_193_p2, icmp_ln15_fu_210_p2, icmp_ln27_reg_414, icmp_ln30_reg_418, ap_CS_fsm_state8, icmp_ln40_fu_344_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln15_fu_210_p2 = ap_const_lv1_0) and (icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln8_reg_368 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln8_reg_368 = ap_const_lv1_0) or ((icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln15_fu_210_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln40_fu_344_p2 = ap_const_lv1_1) or ((icmp_ln27_reg_414 = ap_const_lv1_1) and (icmp_ln30_reg_418 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(icmp_ln8_reg_368, ap_CS_fsm_state4, icmp_ln10_fu_193_p2, icmp_ln15_fu_210_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln11_fu_205_p1, sext_ln25_fu_227_p1, sext_ln27_fu_295_p1, sext_ln34_fu_317_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address0 <= sext_ln34_fu_317_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= sext_ln27_fu_295_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln8_reg_368 = ap_const_lv1_0) or ((icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln15_fu_210_p2 = ap_const_lv1_1))))) then 
            a_address0 <= sext_ln25_fu_227_p1(3 - 1 downto 0);
        elsif (((icmp_ln10_fu_193_p2 = ap_const_lv1_1) and (icmp_ln8_reg_368 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            a_address0 <= zext_ln11_fu_205_p1(3 - 1 downto 0);
        else 
            a_address0 <= "XXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(icmp_ln8_reg_368, ap_CS_fsm_state4, icmp_ln10_fu_193_p2, icmp_ln15_fu_210_p2, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln10_fu_193_p2 = ap_const_lv1_1) and (icmp_ln8_reg_368 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln8_reg_368 = ap_const_lv1_0) or ((icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln15_fu_210_p2 = ap_const_lv1_1)))))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(icmp_ln8_reg_368, ap_CS_fsm_state4, icmp_ln10_fu_193_p2, icmp_ln15_fu_210_p2, ap_CS_fsm_state7, zext_ln25_fu_222_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln8_reg_368 = ap_const_lv1_0) or ((icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln15_fu_210_p2 = ap_const_lv1_1))))) then 
            a_d0 <= zext_ln25_fu_222_p1;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(icmp_ln8_reg_368, ap_CS_fsm_state4, icmp_ln10_fu_193_p2, icmp_ln15_fu_210_p2, icmp_ln27_fu_300_p2, ap_CS_fsm_state7, icmp_ln30_fu_311_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln8_reg_368 = ap_const_lv1_0) or ((icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln15_fu_210_p2 = ap_const_lv1_1)))) or ((icmp_ln30_fu_311_p2 = ap_const_lv1_0) and (icmp_ln27_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    abs_i_fu_254_p3 <= 
        sub_ln11_fu_237_p2 when (abscond_i_fu_248_p2(0) = '1') else 
        neg_i_fu_242_p2;
    abscond_i_fu_248_p2 <= "1" when (signed(sub_ln11_fu_237_p2) > signed(ap_const_lv32_0)) else "0";
    add_ln28_fu_306_p2 <= std_logic_vector(signed(n_0_assign_2_load_1_reg_403) + signed(ap_const_lv32_FFFFFFFF));
    add_ln36_fu_322_p2 <= std_logic_vector(signed(n_0_assign_2_load_1_reg_403) + signed(ap_const_lv32_FFFFFFFE));
    add_ln37_fu_327_p2 <= std_logic_vector(signed(k_assign_2_reg_104) + signed(ap_const_lv32_FFFFFFFE));
    add_ln39_fu_338_p2 <= std_logic_vector(unsigned(p_1_reg_161) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(icmp_ln27_reg_414, icmp_ln30_reg_418, ap_CS_fsm_state8, icmp_ln40_fu_344_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln40_fu_344_p2 = ap_const_lv1_1) or ((icmp_ln27_reg_414 = ap_const_lv1_1) and (icmp_ln30_reg_418 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_i_phi_fu_153_p4_assign_proc : process(icmp_ln8_reg_368, ap_CS_fsm_state4, icmp_ln10_fu_193_p2, icmp_ln15_fu_210_p2, u_0_i_reg_114, p_0_i_reg_149)
    begin
        if (((icmp_ln10_fu_193_p2 = ap_const_lv1_0) and (icmp_ln15_fu_210_p2 = ap_const_lv1_1) and (icmp_ln8_reg_368 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_p_0_i_phi_fu_153_p4 <= u_0_i_reg_114;
        else 
            ap_phi_mux_p_0_i_phi_fu_153_p4 <= p_0_i_reg_149;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln27_reg_414, icmp_ln30_reg_418, ap_CS_fsm_state8, icmp_ln40_fu_344_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln40_fu_344_p2 = ap_const_lv1_1) or ((icmp_ln27_reg_414 = ap_const_lv1_1) and (icmp_ln30_reg_418 = ap_const_lv1_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_fu_273_p2 <= std_logic_vector(unsigned(count_0_i_reg_126) + unsigned(ap_const_lv32_1));
    icmp_ln10_fu_193_p2 <= "1" when (signed(zext_ln10_fu_189_p1) < signed(n_0_assign_2_fu_50)) else "0";
    icmp_ln11_1_fu_267_p2 <= "1" when (abs_i_fu_254_p3 = sub_ln11_1_fu_262_p2) else "0";
    icmp_ln11_fu_232_p2 <= "1" when (zext_ln8_reg_362 = a_q0) else "0";
    icmp_ln15_fu_210_p2 <= "1" when (count_0_i_reg_126 = k_assign_2_reg_104) else "0";
    icmp_ln27_fu_300_p2 <= "1" when (a_q0 = ap_const_lv32_0) else "0";
    icmp_ln30_fu_311_p2 <= "1" when (add_ln28_fu_306_p2 = ap_const_lv32_0) else "0";
    icmp_ln40_fu_344_p2 <= "1" when (n_0_assign_2_fu_50 = ap_const_lv32_6) else "0";
    icmp_ln8_fu_183_p2 <= "1" when (unsigned(u_0_i_reg_114) < unsigned(ap_const_lv3_6)) else "0";
    j_fu_199_p2 <= std_logic_vector(unsigned(j_0_i_reg_138) + unsigned(ap_const_lv31_1));
    neg_i_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln11_fu_237_p2));
    select_ln11_1_fu_287_p3 <= 
        count_0_i_reg_126 when (icmp_ln11_fu_232_p2(0) = '1') else 
        select_ln11_fu_279_p3;
    select_ln11_fu_279_p3 <= 
        count_0_i_reg_126 when (icmp_ln11_1_fu_267_p2(0) = '1') else 
        count_fu_273_p2;
        sext_ln25_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_assign_2_reg_104),64));

    sext_ln27_fu_295_p0 <= n_0_assign_2_fu_50;
        sext_ln27_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln27_fu_295_p0),64));

        sext_ln34_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln28_fu_306_p2),64));

    sub_ln11_1_fu_262_p2 <= std_logic_vector(signed(k_assign_2_reg_104) - signed(zext_ln10_reg_372));
    sub_ln11_fu_237_p2 <= std_logic_vector(unsigned(zext_ln8_reg_362) - unsigned(a_q0));
    u_fu_216_p2 <= std_logic_vector(unsigned(u_0_i_reg_114) + unsigned(ap_const_lv3_1));
    zext_ln10_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_138),32));
    zext_ln11_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_138),64));
    zext_ln25_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_i_phi_fu_153_p4),32));
    zext_ln8_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_0_i_reg_114),32));
end behav;
