// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nqueens,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.149000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=708,HLS_SYN_LUT=1666,HLS_VERSION=2019_2}" *)

module nqueens (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [2:0] a_address0;
reg    a_ce0;
reg    a_we0;
reg   [31:0] a_d0;
wire   [31:0] a_q0;
wire   [31:0] k_i;
reg   [31:0] k_o;
reg    k_o_ap_vld;
wire   [31:0] u_0_i;
reg   [31:0] u_0_o;
reg    u_0_o_ap_vld;
wire   [31:0] sol_list_i;
reg   [31:0] sol_list_o;
reg    sol_list_o_ap_vld;
reg    flag_ap_vld;
reg   [31:0] k_read_reg_202;
wire    ap_CS_fsm_state2;
reg   [31:0] u_0_read_reg_211;
wire   [31:0] grp_counter_fu_128_ap_return;
reg   [31:0] tmp_reg_216;
wire    ap_CS_fsm_state3;
wire    grp_counter_fu_128_ap_ready;
wire    grp_counter_fu_128_ap_done;
wire   [0:0] icmp_ln45_fu_148_p2;
reg   [0:0] icmp_ln45_reg_222;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln47_fu_159_p2;
reg   [0:0] icmp_ln47_reg_226;
wire    ap_CS_fsm_state6;
wire    grp_find_0_fu_138_ap_ready;
wire    grp_find_0_fu_138_ap_done;
reg   [2:0] a_addr_1_reg_230;
wire   [31:0] add_ln53_fu_177_p2;
wire    ap_CS_fsm_state8;
wire    grp_counter_fu_128_ap_start;
wire    grp_counter_fu_128_ap_idle;
wire   [2:0] grp_counter_fu_128_a_address0;
wire    grp_counter_fu_128_a_ce0;
wire    grp_find_0_fu_138_ap_start;
wire    grp_find_0_fu_138_ap_idle;
wire   [2:0] grp_find_0_fu_138_a_address0;
wire    grp_find_0_fu_138_a_ce0;
wire   [3:0] grp_find_0_fu_138_ap_return;
reg   [31:0] empty_2_reg_119;
reg    grp_counter_fu_128_ap_start_reg;
reg    grp_find_0_fu_138_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire  signed [63:0] sext_ln43_fu_144_p1;
wire  signed [63:0] sext_ln51_fu_165_p1;
wire   [31:0] add_ln51_fu_170_p2;
wire  signed [31:0] add_ln46_fu_153_p2;
wire   [31:0] add_ln55_fu_182_p2;
reg    ap_predicate_op56_call_state10;
reg    ap_block_state10_on_subcall_done;
wire   [0:0] icmp_ln56_fu_189_p2;
wire   [31:0] add_ln57_fu_195_p2;
wire    ap_CS_fsm_state7;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_counter_fu_128_ap_start_reg = 1'b0;
#0 grp_find_0_fu_138_ap_start_reg = 1'b0;
end

nqueens_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
nqueens_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a_address0(a_address0),
    .a_ce0(a_ce0),
    .a_we0(a_we0),
    .a_d0(a_d0),
    .a_q0(a_q0),
    .k_o(k_o),
    .k_o_ap_vld(k_o_ap_vld),
    .k_i(k_i),
    .u_0_o(u_0_o),
    .u_0_o_ap_vld(u_0_o_ap_vld),
    .u_0_i(u_0_i),
    .sol_list_o(sol_list_o),
    .sol_list_o_ap_vld(sol_list_o_ap_vld),
    .sol_list_i(sol_list_i),
    .flag(32'd1),
    .flag_ap_vld(flag_ap_vld)
);

counter grp_counter_fu_128(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_counter_fu_128_ap_start),
    .ap_done(grp_counter_fu_128_ap_done),
    .ap_idle(grp_counter_fu_128_ap_idle),
    .ap_ready(grp_counter_fu_128_ap_ready),
    .a_address0(grp_counter_fu_128_a_address0),
    .a_ce0(grp_counter_fu_128_a_ce0),
    .a_q0(a_q0),
    .k(k_read_reg_202),
    .u_0(u_0_read_reg_211),
    .ap_return(grp_counter_fu_128_ap_return)
);

find_0 grp_find_0_fu_138(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_find_0_fu_138_ap_start),
    .ap_done(grp_find_0_fu_138_ap_done),
    .ap_idle(grp_find_0_fu_138_ap_idle),
    .ap_ready(grp_find_0_fu_138_ap_ready),
    .a_address0(grp_find_0_fu_138_a_address0),
    .a_ce0(grp_find_0_fu_138_a_ce0),
    .a_q0(a_q0),
    .ap_return(grp_find_0_fu_138_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_counter_fu_128_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_counter_fu_128_ap_start_reg <= 1'b1;
        end else if ((grp_counter_fu_128_ap_ready == 1'b1)) begin
            grp_counter_fu_128_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_find_0_fu_138_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_find_0_fu_138_ap_start_reg <= 1'b1;
        end else if ((grp_find_0_fu_138_ap_ready == 1'b1)) begin
            grp_find_0_fu_138_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln45_fu_148_p2 == 1'd0))) begin
        empty_2_reg_119 <= k_read_reg_202;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln45_reg_222 == 1'd1))) begin
        empty_2_reg_119 <= add_ln53_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_find_0_fu_138_ap_done == 1'b1) & (icmp_ln47_fu_159_p2 == 1'd0))) begin
        a_addr_1_reg_230 <= sext_ln51_fu_165_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln45_reg_222 <= icmp_ln45_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_find_0_fu_138_ap_done == 1'b1))) begin
        icmp_ln47_reg_226 <= icmp_ln47_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_read_reg_202 <= k_i;
        u_0_read_reg_211 <= u_0_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_counter_fu_128_ap_done == 1'b1))) begin
        tmp_reg_216 <= grp_counter_fu_128_ap_return;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_address0 = a_addr_1_reg_230;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = sext_ln43_fu_144_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state10) & ((icmp_ln47_reg_226 == 1'd0) | (icmp_ln45_reg_222 == 1'd0))))) begin
        a_address0 = grp_find_0_fu_138_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = grp_counter_fu_128_a_address0;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        a_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state10) & ((icmp_ln47_reg_226 == 1'd0) | (icmp_ln45_reg_222 == 1'd0))))) begin
        a_ce0 = grp_find_0_fu_138_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = grp_counter_fu_128_a_ce0;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_d0 = tmp_reg_216;
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & ((icmp_ln56_fu_189_p2 == 1'd1) | ((icmp_ln47_reg_226 == 1'd1) & (icmp_ln45_reg_222 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & ((icmp_ln56_fu_189_p2 == 1'd1) | ((icmp_ln47_reg_226 == 1'd1) & (icmp_ln45_reg_222 == 1'd1))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_find_0_fu_138_ap_done == 1'b1) & (icmp_ln47_fu_159_p2 == 1'd1))) begin
        flag_ap_vld = 1'b1;
    end else begin
        flag_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_o = add_ln55_fu_182_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (grp_find_0_fu_138_ap_done == 1'b1))) begin
        k_o = add_ln46_fu_153_p2;
    end else begin
        k_o = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state6) & (grp_find_0_fu_138_ap_done == 1'b1)))) begin
        k_o_ap_vld = 1'b1;
    end else begin
        k_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & (((icmp_ln56_fu_189_p2 == 1'd1) & (icmp_ln45_reg_222 == 1'd0)) | ((icmp_ln56_fu_189_p2 == 1'd1) & (icmp_ln47_reg_226 == 1'd0))))) begin
        sol_list_o = add_ln57_fu_195_p2;
    end else begin
        sol_list_o = sol_list_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & (((icmp_ln56_fu_189_p2 == 1'd1) & (icmp_ln45_reg_222 == 1'd0)) | ((icmp_ln56_fu_189_p2 == 1'd1) & (icmp_ln47_reg_226 == 1'd0))))) begin
        sol_list_o_ap_vld = 1'b1;
    end else begin
        sol_list_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln45_reg_222 == 1'd1))) begin
        u_0_o = add_ln51_fu_170_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        u_0_o = 32'd1;
    end else begin
        u_0_o = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln45_reg_222 == 1'd1)))) begin
        u_0_o_ap_vld = 1'b1;
    end else begin
        u_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_counter_fu_128_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln45_fu_148_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_find_0_fu_138_ap_done == 1'b1) & (icmp_ln47_fu_159_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b1 == ap_CS_fsm_state6) & (grp_find_0_fu_138_ap_done == 1'b1) & (icmp_ln47_fu_159_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & ((icmp_ln56_fu_189_p2 == 1'd1) | ((icmp_ln47_reg_226 == 1'd1) & (icmp_ln45_reg_222 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & (((icmp_ln56_fu_189_p2 == 1'd0) & (icmp_ln45_reg_222 == 1'd0)) | ((icmp_ln56_fu_189_p2 == 1'd0) & (icmp_ln47_reg_226 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_153_p2 = ($signed(k_read_reg_202) + $signed(32'd4294967295));

assign add_ln51_fu_170_p2 = (a_q0 + 32'd1);

assign add_ln53_fu_177_p2 = ($signed(k_read_reg_202) + $signed(32'd4294967294));

assign add_ln55_fu_182_p2 = (empty_2_reg_119 + 32'd1);

assign add_ln57_fu_195_p2 = (sol_list_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = ((grp_find_0_fu_138_ap_done == 1'b0) & (ap_predicate_op56_call_state10 == 1'b1));
end

always @ (*) begin
    ap_predicate_op56_call_state10 = ((icmp_ln47_reg_226 == 1'd0) | (icmp_ln45_reg_222 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_counter_fu_128_ap_start = grp_counter_fu_128_ap_start_reg;

assign grp_find_0_fu_138_ap_start = grp_find_0_fu_138_ap_start_reg;

assign icmp_ln45_fu_148_p2 = ((tmp_reg_216 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_159_p2 = ((grp_find_0_fu_138_ap_return == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_189_p2 = ((grp_find_0_fu_138_ap_return == 4'd8) ? 1'b1 : 1'b0);

assign sext_ln43_fu_144_p1 = $signed(k_read_reg_202);

assign sext_ln51_fu_165_p1 = add_ln46_fu_153_p2;

endmodule //nqueens
