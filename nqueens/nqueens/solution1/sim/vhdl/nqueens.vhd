-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nqueens is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of nqueens is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nqueens,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.149000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=805,HLS_SYN_LUT=1238,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x_fu_329_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sol_list_1_load_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln14_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal iteration_fu_351_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal iteration_reg_563 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_addr_1_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln17_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln19_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_fu_378_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_585 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln19_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_1_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_1_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln31_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal k_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_5_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal k_aux_4_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln10_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iteration_0_reg_109 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_phi_mux_phi_ln50_phi_fu_262_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_aux_0_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_0_0_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_aux_1_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_u_0_2_phi_fu_249_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_0_4_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_0_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_213 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_aux_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_aux_2_phi_fu_227_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_aux_2_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_4_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_2_phi_fu_237_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_0_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_0_2_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln50_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_aux_3_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_0_3_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sol_list_2_phi_fu_313_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sol_list_2_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln16_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sol_list_1_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal sol_list_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln20_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_1_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_1_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_450_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component nqueens_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nqueens_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    nqueens_AXILiteS_s_axi_U : component nqueens_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_phi_mux_sol_list_2_phi_fu_313_p4);

    a_U : component nqueens_a
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => a_d0,
        q0 => a_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                count_0_reg_201 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                count_0_reg_201 <= select_ln20_1_fu_458_p3;
            end if; 
        end if;
    end process;

    iteration_0_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_323_p2 = ap_const_lv1_1))) then 
                iteration_0_reg_109 <= ap_const_lv7_0;
            elsif (((icmp_ln14_reg_559 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_1))) then 
                iteration_0_reg_109 <= iteration_reg_563;
            end if; 
        end if;
    end process;

    j_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_reg_213 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_213 <= j_reg_585;
            end if; 
        end if;
    end process;

    k_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_323_p2 = ap_const_lv1_1))) then 
                k_0_reg_132 <= ap_const_lv32_0;
            elsif (((icmp_ln14_reg_559 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_1))) then 
                k_0_reg_132 <= k_3_reg_283;
            end if; 
        end if;
    end process;

    k_1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_1_reg_167 <= k_0_reg_132;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_0))) then 
                k_1_reg_167 <= k_5_fu_510_p2;
            end if; 
        end if;
    end process;

    k_2_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln31_fu_466_p2 = ap_const_lv1_0))) then 
                k_2_reg_234 <= k_1_reg_167;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_608 = ap_const_lv1_1))) then 
                k_2_reg_234 <= k_4_fu_496_p2;
            end if; 
        end if;
    end process;

    k_3_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_1) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1))) then 
                k_3_reg_283 <= k_fu_472_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_1))) then 
                k_3_reg_283 <= ap_const_lv32_8;
            end if; 
        end if;
    end process;

    k_aux_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_323_p2 = ap_const_lv1_1))) then 
                k_aux_0_reg_120 <= ap_const_lv32_1;
            elsif (((icmp_ln14_reg_559 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_1))) then 
                k_aux_0_reg_120 <= k_aux_3_reg_270;
            end if; 
        end if;
    end process;

    k_aux_1_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_aux_1_reg_156 <= k_aux_0_reg_120;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_0))) then 
                k_aux_1_reg_156 <= k_aux_4_fu_516_p2;
            end if; 
        end if;
    end process;

    k_aux_2_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln31_fu_466_p2 = ap_const_lv1_0))) then 
                k_aux_2_reg_224 <= k_aux_1_reg_156;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_608 = ap_const_lv1_1))) then 
                k_aux_2_reg_224 <= k_aux_fu_503_p2;
            end if; 
        end if;
    end process;

    k_aux_3_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_1) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1))) then 
                k_aux_3_reg_270 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_1))) then 
                k_aux_3_reg_270 <= k_aux_4_fu_516_p2;
            end if; 
        end if;
    end process;

    phi_ln50_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_1) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1))) then 
                phi_ln50_reg_257 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_1))) then 
                phi_ln50_reg_257 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    sol_list_1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_1))) then 
                sol_list_1_fu_60 <= sol_list_fu_528_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_323_p2 = ap_const_lv1_1))) then 
                sol_list_1_fu_60 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    u_0_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_323_p2 = ap_const_lv1_1))) then 
                u_0_0_reg_144 <= ap_const_lv32_1;
            elsif (((icmp_ln14_reg_559 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_1))) then 
                u_0_0_reg_144 <= u_0_3_reg_296;
            end if; 
        end if;
    end process;

    u_0_2_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln31_fu_466_p2 = ap_const_lv1_0))) then 
                u_0_2_reg_244 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_608 = ap_const_lv1_1))) then 
                u_0_2_reg_244 <= u_0_fu_489_p2;
            end if; 
        end if;
    end process;

    u_0_3_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_1) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1))) then 
                u_0_3_reg_296 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_1))) then 
                u_0_3_reg_296 <= ap_phi_mux_u_0_2_phi_fu_249_p4;
            end if; 
        end if;
    end process;

    u_0_4_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_389_p2 = ap_const_lv1_0) and (icmp_ln19_fu_372_p2 = ap_const_lv1_0))) then 
                u_0_4_reg_189 <= u_1_fu_395_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                u_0_4_reg_189 <= u_reg_178;
            end if; 
        end if;
    end process;

    u_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                u_reg_178 <= u_0_0_reg_144;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_0))) then 
                u_reg_178 <= ap_phi_mux_u_0_2_phi_fu_249_p4;
            end if; 
        end if;
    end process;

    x_0_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_323_p2 = ap_const_lv1_0))) then 
                x_0_reg_98 <= x_fu_329_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_reg_98 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                a_addr_1_reg_568 <= sext_ln16_fu_357_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln14_reg_559 <= icmp_ln14_fu_345_p2;
                iteration_reg_563 <= iteration_fu_351_p2;
                sol_list_1_load_reg_553 <= sol_list_1_fu_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln17_reg_573 <= icmp_ln17_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln31_reg_608 <= icmp_ln31_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                j_reg_585 <= j_fu_378_p2;
                    zext_ln19_reg_577(30 downto 0) <= zext_ln19_fu_368_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln14_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln14_reg_559 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_0)))) then
                sol_list_2_reg_310 <= sol_list_1_fu_60;
            end if;
        end if;
    end process;
    zext_ln19_reg_577(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln14_fu_345_p2, icmp_ln14_reg_559, icmp_ln17_reg_573, ap_CS_fsm_state6, icmp_ln19_fu_372_p2, icmp_ln24_fu_389_p2, icmp_ln31_fu_466_p2, ap_CS_fsm_state9, icmp_ln34_fu_478_p2, ap_CS_fsm_state10, icmp_ln10_fu_323_p2, ap_CS_fsm_state11, ap_phi_mux_phi_ln50_phi_fu_262_p4, icmp_ln45_fu_522_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_323_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln14_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln17_reg_573 = ap_const_lv1_0) or ((icmp_ln19_fu_372_p2 = ap_const_lv1_0) and (icmp_ln24_fu_389_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_389_p2 = ap_const_lv1_0) and (icmp_ln19_fu_372_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_1) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln45_fu_522_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln14_reg_559 = ap_const_lv1_0) or (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, a_addr_1_reg_568, ap_CS_fsm_state4, icmp_ln17_reg_573, ap_CS_fsm_state6, icmp_ln19_fu_372_p2, icmp_ln24_fu_389_p2, icmp_ln31_fu_466_p2, ap_CS_fsm_state9, icmp_ln34_fu_478_p2, zext_ln11_fu_335_p1, sext_ln16_fu_357_p1, zext_ln20_fu_384_p1, sext_ln38_fu_484_p1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_0) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1))) then 
            a_address0 <= sext_ln38_fu_484_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_372_p2 = ap_const_lv1_0) and (icmp_ln24_fu_389_p2 = ap_const_lv1_1)))) then 
            a_address0 <= a_addr_1_reg_568;
        elsif (((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_372_p2 = ap_const_lv1_1))) then 
            a_address0 <= zext_ln20_fu_384_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= sext_ln16_fu_357_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= zext_ln11_fu_335_p1(3 - 1 downto 0);
        else 
            a_address0 <= "XXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln17_reg_573, ap_CS_fsm_state6, icmp_ln19_fu_372_p2, icmp_ln24_fu_389_p2, icmp_ln31_fu_466_p2, ap_CS_fsm_state9, icmp_ln34_fu_478_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_0) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1)) or ((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_372_p2 = ap_const_lv1_0) and (icmp_ln24_fu_389_p2 = ap_const_lv1_1)) or ((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_372_p2 = ap_const_lv1_1)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln17_reg_573, ap_CS_fsm_state6, icmp_ln19_fu_372_p2, icmp_ln24_fu_389_p2, icmp_ln31_fu_466_p2, ap_CS_fsm_state9, icmp_ln34_fu_478_p2, u_0_4_reg_189)
    begin
        if (((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_372_p2 = ap_const_lv1_0) and (icmp_ln24_fu_389_p2 = ap_const_lv1_1))) then 
            a_d0 <= u_0_4_reg_189;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_0) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1)))) then 
            a_d0 <= ap_const_lv32_0;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln17_reg_573, ap_CS_fsm_state6, icmp_ln19_fu_372_p2, icmp_ln24_fu_389_p2, icmp_ln31_fu_466_p2, ap_CS_fsm_state9, icmp_ln34_fu_478_p2, icmp_ln10_fu_323_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_323_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln34_fu_478_p2 = ap_const_lv1_0) and (icmp_ln31_fu_466_p2 = ap_const_lv1_1)) or ((icmp_ln17_reg_573 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_372_p2 = ap_const_lv1_0) and (icmp_ln24_fu_389_p2 = ap_const_lv1_1)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    abs_fu_425_p3 <= 
        sub_ln20_fu_407_p2 when (abscond_fu_419_p2(0) = '1') else 
        neg_fu_413_p2;
    abscond_fu_419_p2 <= "1" when (signed(sub_ln20_fu_407_p2) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(icmp_ln14_reg_559, ap_CS_fsm_state11, ap_phi_mux_phi_ln50_phi_fu_262_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln14_reg_559 = ap_const_lv1_0) or (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_2_phi_fu_237_p4_assign_proc : process(icmp_ln31_reg_608, ap_CS_fsm_state10, k_4_fu_496_p2, k_2_reg_234)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_608 = ap_const_lv1_1))) then 
            ap_phi_mux_k_2_phi_fu_237_p4 <= k_4_fu_496_p2;
        else 
            ap_phi_mux_k_2_phi_fu_237_p4 <= k_2_reg_234;
        end if; 
    end process;


    ap_phi_mux_k_aux_2_phi_fu_227_p4_assign_proc : process(icmp_ln31_reg_608, ap_CS_fsm_state10, k_aux_fu_503_p2, k_aux_2_reg_224)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_608 = ap_const_lv1_1))) then 
            ap_phi_mux_k_aux_2_phi_fu_227_p4 <= k_aux_fu_503_p2;
        else 
            ap_phi_mux_k_aux_2_phi_fu_227_p4 <= k_aux_2_reg_224;
        end if; 
    end process;

    ap_phi_mux_phi_ln50_phi_fu_262_p4 <= phi_ln50_reg_257;

    ap_phi_mux_sol_list_2_phi_fu_313_p4_assign_proc : process(icmp_ln14_reg_559, ap_CS_fsm_state11, ap_phi_mux_phi_ln50_phi_fu_262_p4, sol_list_2_reg_310, sol_list_1_fu_60)
    begin
        if (((icmp_ln14_reg_559 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_0))) then 
            ap_phi_mux_sol_list_2_phi_fu_313_p4 <= sol_list_1_fu_60;
        else 
            ap_phi_mux_sol_list_2_phi_fu_313_p4 <= sol_list_2_reg_310;
        end if; 
    end process;


    ap_phi_mux_u_0_2_phi_fu_249_p4_assign_proc : process(icmp_ln31_reg_608, ap_CS_fsm_state10, u_0_fu_489_p2, u_0_2_reg_244)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_608 = ap_const_lv1_1))) then 
            ap_phi_mux_u_0_2_phi_fu_249_p4 <= u_0_fu_489_p2;
        else 
            ap_phi_mux_u_0_2_phi_fu_249_p4 <= u_0_2_reg_244;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln14_reg_559, ap_CS_fsm_state11, ap_phi_mux_phi_ln50_phi_fu_262_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln14_reg_559 = ap_const_lv1_0) or (ap_phi_mux_phi_ln50_phi_fu_262_p4 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    count_fu_444_p2 <= std_logic_vector(unsigned(count_0_reg_201) + unsigned(ap_const_lv32_1));
    icmp_ln10_fu_323_p2 <= "1" when (x_0_reg_98 = ap_const_lv4_8) else "0";
    icmp_ln14_fu_345_p2 <= "1" when (unsigned(iteration_0_reg_109) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln17_fu_362_p2 <= "1" when (signed(u_0_4_reg_189) < signed(ap_const_lv32_9)) else "0";
    icmp_ln19_fu_372_p2 <= "1" when (signed(zext_ln19_fu_368_p1) < signed(k_1_reg_167)) else "0";
    icmp_ln20_1_fu_438_p2 <= "1" when (abs_fu_425_p3 = sub_ln20_1_fu_433_p2) else "0";
    icmp_ln20_fu_401_p2 <= "1" when (u_0_4_reg_189 = a_q0) else "0";
    icmp_ln24_fu_389_p2 <= "1" when (count_0_reg_201 = k_1_reg_167) else "0";
    icmp_ln31_fu_466_p2 <= "1" when (a_q0 = ap_const_lv32_0) else "0";
    icmp_ln34_fu_478_p2 <= "1" when (k_aux_1_reg_156 = ap_const_lv32_1) else "0";
    icmp_ln45_fu_522_p2 <= "1" when (k_5_fu_510_p2 = ap_const_lv32_8) else "0";
    iteration_fu_351_p2 <= std_logic_vector(unsigned(iteration_0_reg_109) + unsigned(ap_const_lv7_1));
    j_fu_378_p2 <= std_logic_vector(unsigned(j_0_reg_213) + unsigned(ap_const_lv31_1));
    k_4_fu_496_p2 <= std_logic_vector(signed(k_1_reg_167) + signed(ap_const_lv32_FFFFFFFE));
    k_5_fu_510_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_2_phi_fu_237_p4) + unsigned(ap_const_lv32_1));
    k_aux_4_fu_516_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_aux_2_phi_fu_227_p4) + unsigned(ap_const_lv32_1));
    k_aux_fu_503_p2 <= std_logic_vector(unsigned(k_aux_1_reg_156) + unsigned(ap_const_lv32_FFFFFFFE));
    k_fu_472_p2 <= std_logic_vector(signed(k_1_reg_167) + signed(ap_const_lv32_FFFFFFFF));
    neg_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln20_fu_407_p2));
    select_ln20_1_fu_458_p3 <= 
        count_0_reg_201 when (icmp_ln20_fu_401_p2(0) = '1') else 
        select_ln20_fu_450_p3;
    select_ln20_fu_450_p3 <= 
        count_0_reg_201 when (icmp_ln20_1_fu_438_p2(0) = '1') else 
        count_fu_444_p2;
        sext_ln16_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_1_reg_167),64));

        sext_ln38_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_fu_472_p2),64));

    sol_list_fu_528_p2 <= std_logic_vector(unsigned(sol_list_1_load_reg_553) + unsigned(ap_const_lv32_1));
    sub_ln20_1_fu_433_p2 <= std_logic_vector(signed(k_1_reg_167) - signed(zext_ln19_reg_577));
    sub_ln20_fu_407_p2 <= std_logic_vector(unsigned(u_0_4_reg_189) - unsigned(a_q0));
    u_0_fu_489_p2 <= std_logic_vector(unsigned(a_q0) + unsigned(ap_const_lv32_1));
    u_1_fu_395_p2 <= std_logic_vector(unsigned(u_0_4_reg_189) + unsigned(ap_const_lv32_1));
    x_fu_329_p2 <= std_logic_vector(unsigned(x_0_reg_98) + unsigned(ap_const_lv4_1));
    zext_ln11_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_98),64));
    zext_ln19_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_213),32));
    zext_ln20_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_213),64));
end behav;
