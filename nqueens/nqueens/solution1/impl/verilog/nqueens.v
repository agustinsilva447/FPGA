// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nqueens,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.149000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=621,HLS_SYN_LUT=1467,HLS_VERSION=2019_2}" *)

module nqueens (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_state6 = 7'd16;
parameter    ap_ST_fsm_state7 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [2:0] a_address0;
reg    a_ce0;
reg    a_we0;
reg   [31:0] a_d0;
wire   [31:0] a_q0;
wire   [31:0] k_i;
reg    k_o_ap_vld;
wire   [31:0] u_0_i;
reg   [31:0] u_0_o;
reg    u_0_o_ap_vld;
wire   [31:0] sol_list_i;
reg   [31:0] sol_list_o;
reg    sol_list_o_ap_vld;
reg    flag_ap_vld;
reg   [31:0] count_0_i_reg_149;
reg   [30:0] j_0_i_reg_161;
reg  signed [31:0] k_read_reg_378;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln7_fu_219_p2;
reg   [0:0] icmp_ln7_reg_395;
wire    ap_CS_fsm_state3;
wire   [31:0] zext_ln9_fu_225_p1;
reg   [31:0] zext_ln9_reg_399;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln9_fu_229_p2;
reg   [0:0] icmp_ln9_reg_404;
wire   [30:0] j_fu_234_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln11_1_fu_301_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] u_1_fu_314_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln15_fu_309_p2;
wire   [0:0] icmp_ln34_fu_324_p2;
reg   [0:0] icmp_ln34_reg_431;
reg   [2:0] a_addr_1_reg_438;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [31:0] u_0_i_reg_139;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_p_0_i_phi_fu_176_p4;
reg   [31:0] p_0_i_reg_172;
reg   [0:0] exit_1_reg_185;
wire   [0:0] icmp_ln36_fu_335_p2;
wire   [31:0] add_ln42_fu_352_p2;
reg   [31:0] ap_phi_mux_empty_3_phi_fu_201_p4;
reg   [31:0] empty_3_reg_198;
wire    ap_CS_fsm_state8;
reg   [0:0] ap_phi_mux_exit_2_phi_fu_211_p4;
reg   [0:0] exit_2_reg_207;
wire   [63:0] zext_ln11_fu_240_p1;
wire  signed [63:0] sext_ln32_fu_320_p1;
wire  signed [63:0] sext_ln40_fu_340_p1;
wire   [31:0] add_ln40_fu_345_p2;
wire   [31:0] add_ln44_fu_358_p2;
wire   [0:0] icmp_ln45_fu_365_p2;
wire   [31:0] add_ln46_fu_371_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] sub_ln11_fu_251_p2;
wire   [0:0] abscond_i_fu_263_p2;
wire   [31:0] neg_i_fu_257_p2;
wire   [31:0] abs_i_fu_269_p3;
wire   [31:0] sub_ln11_1_fu_277_p2;
wire   [0:0] icmp_ln11_1_fu_281_p2;
wire   [31:0] count_fu_287_p2;
wire   [0:0] icmp_ln11_fu_245_p2;
wire   [31:0] select_ln11_fu_293_p3;
wire   [31:0] add_ln35_fu_330_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_199;
reg    ap_condition_204;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

nqueens_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
nqueens_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a_address0(a_address0),
    .a_ce0(a_ce0),
    .a_we0(a_we0),
    .a_d0(a_d0),
    .a_q0(a_q0),
    .k_o(add_ln44_fu_358_p2),
    .k_o_ap_vld(k_o_ap_vld),
    .k_i(k_i),
    .u_0_o(u_0_o),
    .u_0_o_ap_vld(u_0_o_ap_vld),
    .u_0_i(u_0_i),
    .sol_list_o(sol_list_o),
    .sol_list_o_ap_vld(sol_list_o_ap_vld),
    .sol_list_i(sol_list_i),
    .flag(32'd1),
    .flag_ap_vld(flag_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln7_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln7_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        count_0_i_reg_149 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_404 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        count_0_i_reg_149 <= select_ln11_1_fu_301_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln7_reg_395 == 1'd0) & (icmp_ln34_fu_324_p2 == 1'd0)) | ((icmp_ln34_fu_324_p2 == 1'd0) & (icmp_ln15_fu_309_p2 == 1'd1))))) begin
        empty_3_reg_198 <= k_read_reg_378;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_reg_431 == 1'd1))) begin
        empty_3_reg_198 <= add_ln42_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((1'b1 == ap_condition_204)) begin
            exit_1_reg_185 <= 1'd0;
        end else if ((1'b1 == ap_condition_199)) begin
            exit_1_reg_185 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln7_reg_395 == 1'd0) & (icmp_ln34_fu_324_p2 == 1'd0)) | ((icmp_ln34_fu_324_p2 == 1'd0) & (icmp_ln15_fu_309_p2 == 1'd1))))) begin
        exit_2_reg_207 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_reg_431 == 1'd1))) begin
        exit_2_reg_207 <= exit_1_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_i_reg_161 <= 31'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_i_reg_161 <= j_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_395 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln15_fu_309_p2 == 1'd1))) begin
        p_0_i_reg_172 <= u_0_i_reg_139;
    end else if (((icmp_ln7_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0_i_reg_172 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_395 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln15_fu_309_p2 == 1'd0))) begin
        u_0_i_reg_139 <= u_1_fu_314_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        u_0_i_reg_139 <= u_0_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln7_reg_395 == 1'd0) & (icmp_ln34_fu_324_p2 == 1'd1)) | ((icmp_ln34_fu_324_p2 == 1'd1) & (icmp_ln15_fu_309_p2 == 1'd1))))) begin
        a_addr_1_reg_438 <= sext_ln40_fu_340_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln7_reg_395 == 1'd0) | (icmp_ln15_fu_309_p2 == 1'd1)))) begin
        icmp_ln34_reg_431 <= icmp_ln34_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln7_reg_395 <= icmp_ln7_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln9_reg_404 <= icmp_ln9_fu_229_p2;
        zext_ln9_reg_399[30 : 0] <= zext_ln9_fu_225_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_read_reg_378 <= k_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_address0 = a_addr_1_reg_438;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = sext_ln32_fu_320_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        a_address0 = zext_ln11_fu_240_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_d0 = ap_phi_mux_p_0_i_phi_fu_176_p4;
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & ((icmp_ln7_reg_395 == 1'd0) | (icmp_ln15_fu_309_p2 == 1'd1))))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln9_fu_229_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln45_fu_365_p2 == 1'd1) | (ap_phi_mux_exit_2_phi_fu_211_p4 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_reg_431 == 1'd1))) begin
        ap_phi_mux_empty_3_phi_fu_201_p4 = add_ln42_fu_352_p2;
    end else begin
        ap_phi_mux_empty_3_phi_fu_201_p4 = empty_3_reg_198;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_reg_431 == 1'd1))) begin
        ap_phi_mux_exit_2_phi_fu_211_p4 = exit_1_reg_185;
    end else begin
        ap_phi_mux_exit_2_phi_fu_211_p4 = exit_2_reg_207;
    end
end

always @ (*) begin
    if (((icmp_ln7_reg_395 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln15_fu_309_p2 == 1'd1))) begin
        ap_phi_mux_p_0_i_phi_fu_176_p4 = u_0_i_reg_139;
    end else begin
        ap_phi_mux_p_0_i_phi_fu_176_p4 = p_0_i_reg_172;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln45_fu_365_p2 == 1'd1) | (ap_phi_mux_exit_2_phi_fu_211_p4 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln7_reg_395 == 1'd0) & (icmp_ln36_fu_335_p2 == 1'd1) & (icmp_ln34_fu_324_p2 == 1'd1)) | ((icmp_ln36_fu_335_p2 == 1'd1) & (icmp_ln34_fu_324_p2 == 1'd1) & (icmp_ln15_fu_309_p2 == 1'd1))))) begin
        flag_ap_vld = 1'b1;
    end else begin
        flag_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_o_ap_vld = 1'b1;
    end else begin
        k_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln45_fu_365_p2 == 1'd1))) begin
        sol_list_o = add_ln46_fu_371_p2;
    end else begin
        sol_list_o = sol_list_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln45_fu_365_p2 == 1'd1))) begin
        sol_list_o_ap_vld = 1'b1;
    end else begin
        sol_list_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_reg_431 == 1'd1))) begin
        u_0_o = add_ln40_fu_345_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln7_reg_395 == 1'd0) | (icmp_ln15_fu_309_p2 == 1'd1)))) begin
        u_0_o = 32'd1;
    end else begin
        u_0_o = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_reg_431 == 1'd1)) | ((1'b1 == ap_CS_fsm_state6) & ((icmp_ln7_reg_395 == 1'd0) | (icmp_ln15_fu_309_p2 == 1'd1))))) begin
        u_0_o_ap_vld = 1'b1;
    end else begin
        u_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln7_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln9_fu_229_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln9_fu_229_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln7_reg_395 == 1'd0) & (icmp_ln34_fu_324_p2 == 1'd1)) | ((icmp_ln34_fu_324_p2 == 1'd1) & (icmp_ln15_fu_309_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln7_reg_395 == 1'd0) & (icmp_ln34_fu_324_p2 == 1'd0)) | ((icmp_ln34_fu_324_p2 == 1'd0) & (icmp_ln15_fu_309_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln45_fu_365_p2 == 1'd1) | (ap_phi_mux_exit_2_phi_fu_211_p4 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_i_fu_269_p3 = ((abscond_i_fu_263_p2[0:0] === 1'b1) ? sub_ln11_fu_251_p2 : neg_i_fu_257_p2);

assign abscond_i_fu_263_p2 = (($signed(sub_ln11_fu_251_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln35_fu_330_p2 = ($signed(k_read_reg_378) + $signed(32'd4294967295));

assign add_ln40_fu_345_p2 = (a_q0 + 32'd1);

assign add_ln42_fu_352_p2 = ($signed(k_read_reg_378) + $signed(32'd4294967294));

assign add_ln44_fu_358_p2 = (ap_phi_mux_empty_3_phi_fu_201_p4 + 32'd1);

assign add_ln46_fu_371_p2 = (sol_list_i + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_199 = (((icmp_ln7_reg_395 == 1'd0) & (icmp_ln36_fu_335_p2 == 1'd1) & (icmp_ln34_fu_324_p2 == 1'd1)) | ((icmp_ln36_fu_335_p2 == 1'd1) & (icmp_ln34_fu_324_p2 == 1'd1) & (icmp_ln15_fu_309_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_204 = (((icmp_ln7_reg_395 == 1'd0) & (icmp_ln36_fu_335_p2 == 1'd0) & (icmp_ln34_fu_324_p2 == 1'd1)) | ((icmp_ln36_fu_335_p2 == 1'd0) & (icmp_ln34_fu_324_p2 == 1'd1) & (icmp_ln15_fu_309_p2 == 1'd1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign count_fu_287_p2 = (count_0_i_reg_149 + 32'd1);

assign icmp_ln11_1_fu_281_p2 = ((abs_i_fu_269_p3 == sub_ln11_1_fu_277_p2) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_245_p2 = ((u_0_i_reg_139 == a_q0) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_309_p2 = ((count_0_i_reg_149 == k_read_reg_378) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_324_p2 = ((ap_phi_mux_p_0_i_phi_fu_176_p4 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_335_p2 = ((k_read_reg_378 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_365_p2 = ((add_ln44_fu_358_p2 == 32'd8) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_219_p2 = (($signed(u_0_i_reg_139) < $signed(32'd9)) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_229_p2 = (($signed(zext_ln9_fu_225_p1) < $signed(k_read_reg_378)) ? 1'b1 : 1'b0);

assign j_fu_234_p2 = (j_0_i_reg_161 + 31'd1);

assign neg_i_fu_257_p2 = (32'd0 - sub_ln11_fu_251_p2);

assign select_ln11_1_fu_301_p3 = ((icmp_ln11_fu_245_p2[0:0] === 1'b1) ? count_0_i_reg_149 : select_ln11_fu_293_p3);

assign select_ln11_fu_293_p3 = ((icmp_ln11_1_fu_281_p2[0:0] === 1'b1) ? count_0_i_reg_149 : count_fu_287_p2);

assign sext_ln32_fu_320_p1 = k_read_reg_378;

assign sext_ln40_fu_340_p1 = $signed(add_ln35_fu_330_p2);

assign sub_ln11_1_fu_277_p2 = ($signed(k_read_reg_378) - $signed(zext_ln9_reg_399));

assign sub_ln11_fu_251_p2 = (u_0_i_reg_139 - a_q0);

assign u_1_fu_314_p2 = (u_0_i_reg_139 + 32'd1);

assign zext_ln11_fu_240_p1 = j_0_i_reg_161;

assign zext_ln9_fu_225_p1 = j_0_i_reg_161;

always @ (posedge ap_clk) begin
    zext_ln9_reg_399[31] <= 1'b0;
end

endmodule //nqueens
