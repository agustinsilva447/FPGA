// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module counter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        k,
        u_0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp1_stage0 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
input  [31:0] k;
input  [31:0] u_0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] a_address0;
reg a_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] count_0_reg_118;
reg   [3:0] j_0_reg_130;
wire   [0:0] icmp_ln6_fu_154_p2;
reg   [0:0] icmp_ln6_reg_291;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_160_p2;
reg   [3:0] i_reg_295;
wire   [0:0] icmp_ln19_fu_177_p2;
reg   [0:0] icmp_ln19_reg_308;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln21_fu_183_p2;
reg   [0:0] icmp_ln21_reg_312;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] j_fu_189_p2;
reg   [3:0] j_reg_316;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] select_ln23_1_fu_261_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] u_fu_274_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln27_fu_269_p2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg   [3:0] i_0_i_reg_83;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln8_fu_171_p2;
reg   [3:0] f_reg_95;
reg   [31:0] u_0_7_reg_108;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_j_0_phi_fu_134_p4;
reg   [31:0] ap_phi_mux_p_0_phi_fu_146_p4;
reg   [31:0] p_0_reg_142;
wire   [63:0] zext_ln8_fu_166_p1;
wire   [63:0] zext_ln23_fu_195_p1;
wire   [31:0] sub_ln23_fu_210_p2;
wire   [0:0] abscond_fu_222_p2;
wire   [31:0] neg_fu_216_p2;
wire   [31:0] zext_ln21_fu_200_p1;
wire   [31:0] abs_fu_228_p3;
wire   [31:0] sub_ln23_1_fu_236_p2;
wire   [0:0] icmp_ln23_1_fu_241_p2;
wire   [31:0] count_fu_247_p2;
wire   [0:0] icmp_ln23_fu_204_p2;
wire   [31:0] select_ln23_fu_253_p3;
reg   [31:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln19_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln19_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln19_reg_308 == 1'd0) | (icmp_ln27_fu_269_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_p_0_phi_fu_146_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        count_0_reg_118 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln21_reg_312 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        count_0_reg_118 <= select_ln23_1_fu_261_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_291 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln8_fu_171_p2 == 1'd1))) begin
        f_reg_95 <= i_0_i_reg_83;
    end else if (((icmp_ln6_fu_154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        f_reg_95 <= 4'd8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_171_p2 == 1'd0) & (icmp_ln6_reg_291 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_83 <= i_reg_295;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_83 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_130 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln21_reg_312 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_0_reg_130 <= j_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_308 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln27_fu_269_p2 == 1'd1))) begin
        p_0_reg_142 <= u_0_7_reg_108;
    end else if (((icmp_ln19_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_0_reg_142 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_308 == 1'd1) & (icmp_ln27_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        u_0_7_reg_108 <= u_fu_274_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        u_0_7_reg_108 <= u_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_295 <= i_fu_160_p2;
        icmp_ln6_reg_291 <= icmp_ln6_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln19_reg_308 <= icmp_ln19_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln21_reg_312 <= icmp_ln21_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_316 <= j_fu_189_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        a_address0 = zext_ln23_fu_195_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = zext_ln8_fu_166_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln21_fu_183_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state8) & ((icmp_ln19_reg_308 == 1'd0) | (icmp_ln27_fu_269_p2 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_312 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_j_0_phi_fu_134_p4 = j_reg_316;
    end else begin
        ap_phi_mux_j_0_phi_fu_134_p4 = j_0_reg_130;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_308 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln27_fu_269_p2 == 1'd1))) begin
        ap_phi_mux_p_0_phi_fu_146_p4 = u_0_7_reg_108;
    end else begin
        ap_phi_mux_p_0_phi_fu_146_p4 = p_0_reg_142;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln19_reg_308 == 1'd0) | (icmp_ln27_fu_269_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln19_reg_308 == 1'd0) | (icmp_ln27_fu_269_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_p_0_phi_fu_146_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln8_fu_171_p2 == 1'd0) & (icmp_ln6_reg_291 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln19_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln21_fu_183_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln21_fu_183_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln19_reg_308 == 1'd0) | (icmp_ln27_fu_269_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_fu_228_p3 = ((abscond_fu_222_p2[0:0] === 1'b1) ? sub_ln23_fu_210_p2 : neg_fu_216_p2);

assign abscond_fu_222_p2 = (($signed(sub_ln23_fu_210_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign count_fu_247_p2 = (count_0_reg_118 + 32'd1);

assign i_fu_160_p2 = (i_0_i_reg_83 + 4'd1);

assign icmp_ln19_fu_177_p2 = (($signed(u_0_7_reg_108) < $signed(32'd9)) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_183_p2 = ((ap_phi_mux_j_0_phi_fu_134_p4 == f_reg_95) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_241_p2 = ((abs_fu_228_p3 == sub_ln23_1_fu_236_p2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_204_p2 = ((u_0_7_reg_108 == a_q0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_269_p2 = ((count_0_reg_118 == k) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_154_p2 = ((i_0_i_reg_83 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_171_p2 = ((a_q0 == 32'd0) ? 1'b1 : 1'b0);

assign j_fu_189_p2 = (ap_phi_mux_j_0_phi_fu_134_p4 + 4'd1);

assign neg_fu_216_p2 = (32'd0 - sub_ln23_fu_210_p2);

assign select_ln23_1_fu_261_p3 = ((icmp_ln23_fu_204_p2[0:0] === 1'b1) ? count_0_reg_118 : select_ln23_fu_253_p3);

assign select_ln23_fu_253_p3 = ((icmp_ln23_1_fu_241_p2[0:0] === 1'b1) ? count_0_reg_118 : count_fu_247_p2);

assign sub_ln23_1_fu_236_p2 = (k - zext_ln21_fu_200_p1);

assign sub_ln23_fu_210_p2 = (u_0_7_reg_108 - a_q0);

assign u_fu_274_p2 = (u_0_7_reg_108 + 32'd1);

assign zext_ln21_fu_200_p1 = j_0_reg_130;

assign zext_ln23_fu_195_p1 = ap_phi_mux_j_0_phi_fu_134_p4;

assign zext_ln8_fu_166_p1 = i_0_i_reg_83;

endmodule //counter
