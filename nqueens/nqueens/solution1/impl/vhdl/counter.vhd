-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity counter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (31 downto 0);
    u_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of counter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal count_0_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_130 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln6_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_160_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_295 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln21_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_fu_189_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_316 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln23_1_fu_261_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal u_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln27_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal i_0_i_reg_83 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln8_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_reg_95 : STD_LOGIC_VECTOR (3 downto 0);
    signal u_0_7_reg_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_134_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_p_0_phi_fu_146_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln8_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln23_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_fu_228_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln23_1_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_1_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln19_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln19_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln19_reg_308 = ap_const_lv1_0) or (icmp_ln27_fu_269_p2 = ap_const_lv1_1)))) then 
                    ap_return_preg <= ap_phi_mux_p_0_phi_fu_146_p4;
                end if; 
            end if;
        end if;
    end process;


    count_0_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                count_0_reg_118 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln21_reg_312 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                count_0_reg_118 <= select_ln23_1_fu_261_p3;
            end if; 
        end if;
    end process;

    f_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_291 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln8_fu_171_p2 = ap_const_lv1_1))) then 
                f_reg_95 <= i_0_i_reg_83;
            elsif (((icmp_ln6_fu_154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                f_reg_95 <= ap_const_lv4_8;
            end if; 
        end if;
    end process;

    i_0_i_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (icmp_ln6_reg_291 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_83 <= i_reg_295;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_83 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_reg_130 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln21_reg_312 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_0_reg_130 <= j_reg_316;
            end if; 
        end if;
    end process;

    p_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_308 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln27_fu_269_p2 = ap_const_lv1_1))) then 
                p_0_reg_142 <= u_0_7_reg_108;
            elsif (((icmp_ln19_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_reg_142 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    u_0_7_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_308 = ap_const_lv1_1) and (icmp_ln27_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                u_0_7_reg_108 <= u_fu_274_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                u_0_7_reg_108 <= u_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_295 <= i_fu_160_p2;
                icmp_ln6_reg_291 <= icmp_ln6_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln19_reg_308 <= icmp_ln19_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln21_reg_312 <= icmp_ln21_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                j_reg_316 <= j_fu_189_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln6_reg_291, icmp_ln19_fu_177_p2, icmp_ln19_reg_308, ap_CS_fsm_state5, icmp_ln21_fu_183_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state8, icmp_ln27_fu_269_p2, ap_block_pp1_stage0_subdone, ap_CS_fsm_state3, icmp_ln8_fu_171_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln8_fu_171_p2 = ap_const_lv1_0) and (icmp_ln6_reg_291 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln19_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln21_fu_183_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln21_fu_183_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln19_reg_308 = ap_const_lv1_0) or (icmp_ln27_fu_269_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, zext_ln8_fu_166_p1, zext_ln23_fu_195_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            a_address0 <= zext_ln23_fu_195_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= zext_ln8_fu_166_p1(3 - 1 downto 0);
        else 
            a_address0 <= "XXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    abs_fu_228_p3 <= 
        sub_ln23_fu_210_p2 when (abscond_fu_222_p2(0) = '1') else 
        neg_fu_216_p2;
    abscond_fu_222_p2 <= "1" when (signed(sub_ln23_fu_210_p2) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln21_fu_183_p2)
    begin
        if ((icmp_ln21_fu_183_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln19_reg_308, ap_CS_fsm_state8, icmp_ln27_fu_269_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln19_reg_308 = ap_const_lv1_0) or (icmp_ln27_fu_269_p2 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_134_p4_assign_proc : process(j_0_reg_130, icmp_ln21_reg_312, ap_CS_fsm_pp1_stage0, j_reg_316, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln21_reg_312 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_j_0_phi_fu_134_p4 <= j_reg_316;
        else 
            ap_phi_mux_j_0_phi_fu_134_p4 <= j_0_reg_130;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_146_p4_assign_proc : process(icmp_ln19_reg_308, ap_CS_fsm_state8, icmp_ln27_fu_269_p2, u_0_7_reg_108, p_0_reg_142)
    begin
        if (((icmp_ln19_reg_308 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln27_fu_269_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_p_0_phi_fu_146_p4 <= u_0_7_reg_108;
        else 
            ap_phi_mux_p_0_phi_fu_146_p4 <= p_0_reg_142;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln19_reg_308, ap_CS_fsm_state8, icmp_ln27_fu_269_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln19_reg_308 = ap_const_lv1_0) or (icmp_ln27_fu_269_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(icmp_ln19_reg_308, ap_CS_fsm_state8, icmp_ln27_fu_269_p2, ap_phi_mux_p_0_phi_fu_146_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln19_reg_308 = ap_const_lv1_0) or (icmp_ln27_fu_269_p2 = ap_const_lv1_1)))) then 
            ap_return <= ap_phi_mux_p_0_phi_fu_146_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    count_fu_247_p2 <= std_logic_vector(unsigned(count_0_reg_118) + unsigned(ap_const_lv32_1));
    i_fu_160_p2 <= std_logic_vector(unsigned(i_0_i_reg_83) + unsigned(ap_const_lv4_1));
    icmp_ln19_fu_177_p2 <= "1" when (signed(u_0_7_reg_108) < signed(ap_const_lv32_9)) else "0";
    icmp_ln21_fu_183_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_134_p4 = f_reg_95) else "0";
    icmp_ln23_1_fu_241_p2 <= "1" when (abs_fu_228_p3 = sub_ln23_1_fu_236_p2) else "0";
    icmp_ln23_fu_204_p2 <= "1" when (u_0_7_reg_108 = a_q0) else "0";
    icmp_ln27_fu_269_p2 <= "1" when (count_0_reg_118 = k) else "0";
    icmp_ln6_fu_154_p2 <= "1" when (i_0_i_reg_83 = ap_const_lv4_8) else "0";
    icmp_ln8_fu_171_p2 <= "1" when (a_q0 = ap_const_lv32_0) else "0";
    j_fu_189_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_phi_fu_134_p4) + unsigned(ap_const_lv4_1));
    neg_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln23_fu_210_p2));
    select_ln23_1_fu_261_p3 <= 
        count_0_reg_118 when (icmp_ln23_fu_204_p2(0) = '1') else 
        select_ln23_fu_253_p3;
    select_ln23_fu_253_p3 <= 
        count_0_reg_118 when (icmp_ln23_1_fu_241_p2(0) = '1') else 
        count_fu_247_p2;
    sub_ln23_1_fu_236_p2 <= std_logic_vector(unsigned(k) - unsigned(zext_ln21_fu_200_p1));
    sub_ln23_fu_210_p2 <= std_logic_vector(unsigned(u_0_7_reg_108) - unsigned(a_q0));
    u_fu_274_p2 <= std_logic_vector(unsigned(u_0_7_reg_108) + unsigned(ap_const_lv32_1));
    zext_ln21_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_130),32));
    zext_ln23_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_phi_fu_134_p4),64));
    zext_ln8_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_83),64));
end behav;
