-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nqueens is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of nqueens is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nqueens,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.249000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1328,HLS_SYN_LUT=2027,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal iteration_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iteration_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln57_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_nqueens_loop_fu_176_ap_ready : STD_LOGIC;
    signal grp_nqueens_loop_fu_176_ap_done : STD_LOGIC;
    signal icmp_ln60_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nqueens_loop_fu_176_ap_start : STD_LOGIC;
    signal grp_nqueens_loop_fu_176_ap_idle : STD_LOGIC;
    signal grp_nqueens_loop_fu_176_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_7_0_reg_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_6_0_reg_34 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_5_0_reg_46 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_4_0_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_0_reg_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_0_reg_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_0_reg_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_0_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln57_reg_118 : STD_LOGIC_VECTOR (0 downto 0);
    signal sol_list_0_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_0_0_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal iteration_0_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_loop_fu_176_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln57_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component nqueens_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        a_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        a_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        a_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        a_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        a_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        a_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        a_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        k_read : IN STD_LOGIC_VECTOR (31 downto 0);
        u_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sol_list_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nqueens_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    nqueens_AXILiteS_s_axi_U : component nqueens_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => sol_list_0_reg_129);

    grp_nqueens_loop_fu_176 : component nqueens_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nqueens_loop_fu_176_ap_start,
        ap_done => grp_nqueens_loop_fu_176_ap_done,
        ap_idle => grp_nqueens_loop_fu_176_ap_idle,
        ap_ready => grp_nqueens_loop_fu_176_ap_ready,
        a_0_read => a_0_0_reg_106,
        a_1_read => a_1_0_reg_94,
        a_2_read => a_2_0_reg_82,
        a_3_read => a_3_0_reg_70,
        a_4_read => a_4_0_reg_58,
        a_5_read => a_5_0_reg_46,
        a_6_read => a_6_0_reg_34,
        a_7_read => a_7_0_reg_22,
        k_read => k_0_reg_141,
        u_0_read => u_0_0_reg_153,
        sol_list_read => sol_list_0_reg_129,
        ap_return_0 => grp_nqueens_loop_fu_176_ap_return_0,
        ap_return_1 => grp_nqueens_loop_fu_176_ap_return_1,
        ap_return_2 => grp_nqueens_loop_fu_176_ap_return_2,
        ap_return_3 => grp_nqueens_loop_fu_176_ap_return_3,
        ap_return_4 => grp_nqueens_loop_fu_176_ap_return_4,
        ap_return_5 => grp_nqueens_loop_fu_176_ap_return_5,
        ap_return_6 => grp_nqueens_loop_fu_176_ap_return_6,
        ap_return_7 => grp_nqueens_loop_fu_176_ap_return_7,
        ap_return_8 => grp_nqueens_loop_fu_176_ap_return_8,
        ap_return_9 => grp_nqueens_loop_fu_176_ap_return_9,
        ap_return_10 => grp_nqueens_loop_fu_176_ap_return_10,
        ap_return_11 => grp_nqueens_loop_fu_176_ap_return_11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_nqueens_loop_fu_176_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nqueens_loop_fu_176_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = and_ln57_fu_208_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_nqueens_loop_fu_176_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nqueens_loop_fu_176_ap_ready = ap_const_logic_1)) then 
                    grp_nqueens_loop_fu_176_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_0_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_0_0_reg_106 <= grp_nqueens_loop_fu_176_ap_return_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_0_0_reg_106 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    a_1_0_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_1_0_reg_94 <= grp_nqueens_loop_fu_176_ap_return_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_1_0_reg_94 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    a_2_0_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_2_0_reg_82 <= grp_nqueens_loop_fu_176_ap_return_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_2_0_reg_82 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    a_3_0_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_3_0_reg_70 <= grp_nqueens_loop_fu_176_ap_return_7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_3_0_reg_70 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    a_4_0_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_4_0_reg_58 <= grp_nqueens_loop_fu_176_ap_return_8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_4_0_reg_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    a_5_0_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_5_0_reg_46 <= grp_nqueens_loop_fu_176_ap_return_9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_5_0_reg_46 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    a_6_0_reg_34_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_6_0_reg_34 <= grp_nqueens_loop_fu_176_ap_return_10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_6_0_reg_34 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    a_7_0_reg_22_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a_7_0_reg_22 <= grp_nqueens_loop_fu_176_ap_return_11;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_7_0_reg_22 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    iteration_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                iteration_0_reg_165 <= iteration_reg_277;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                iteration_0_reg_165 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    k_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_141 <= grp_nqueens_loop_fu_176_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_141 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_ln57_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln57_reg_118 <= icmp_ln60_fu_268_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln57_reg_118 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    sol_list_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sol_list_0_reg_129 <= grp_nqueens_loop_fu_176_ap_return_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sol_list_0_reg_129 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    u_0_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                u_0_0_reg_153 <= grp_nqueens_loop_fu_176_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_0_0_reg_153 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln57_fu_208_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                iteration_reg_277 <= iteration_fu_214_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, and_ln57_fu_208_p2, ap_CS_fsm_state3, grp_nqueens_loop_fu_176_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_0 = and_ln57_fu_208_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_nqueens_loop_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln57_fu_208_p2 <= (phi_ln57_reg_118 and icmp_ln57_fu_202_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, and_ln57_fu_208_p2)
    begin
        if (((ap_const_lv1_0 = and_ln57_fu_208_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, and_ln57_fu_208_p2)
    begin
        if (((ap_const_lv1_0 = and_ln57_fu_208_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_nqueens_loop_fu_176_ap_start <= grp_nqueens_loop_fu_176_ap_start_reg;
    icmp_ln57_fu_202_p2 <= "1" when (signed(iteration_0_reg_165) < signed(ap_const_lv32_64)) else "0";
    icmp_ln60_fu_268_p2 <= "1" when (grp_nqueens_loop_fu_176_ap_return_3 = ap_const_lv32_0) else "0";
    iteration_fu_214_p2 <= std_logic_vector(unsigned(iteration_0_reg_165) + unsigned(ap_const_lv32_1));
end behav;
