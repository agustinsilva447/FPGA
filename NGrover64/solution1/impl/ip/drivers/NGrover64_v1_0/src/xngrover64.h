// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XNGROVER64_H
#define XNGROVER64_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xngrover64_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Crtl_bus_BaseAddress;
} XNgrover64_Config;
#endif

typedef struct {
    u32 Crtl_bus_BaseAddress;
    u32 IsReady;
} XNgrover64;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XNgrover64_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XNgrover64_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XNgrover64_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XNgrover64_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XNgrover64_Initialize(XNgrover64 *InstancePtr, u16 DeviceId);
XNgrover64_Config* XNgrover64_LookupConfig(u16 DeviceId);
int XNgrover64_CfgInitialize(XNgrover64 *InstancePtr, XNgrover64_Config *ConfigPtr);
#else
int XNgrover64_Initialize(XNgrover64 *InstancePtr, const char* InstanceName);
int XNgrover64_Release(XNgrover64 *InstancePtr);
#endif

void XNgrover64_Start(XNgrover64 *InstancePtr);
u32 XNgrover64_IsDone(XNgrover64 *InstancePtr);
u32 XNgrover64_IsIdle(XNgrover64 *InstancePtr);
u32 XNgrover64_IsReady(XNgrover64 *InstancePtr);
void XNgrover64_EnableAutoRestart(XNgrover64 *InstancePtr);
void XNgrover64_DisableAutoRestart(XNgrover64 *InstancePtr);

void XNgrover64_Set_C(XNgrover64 *InstancePtr, u32 Data);
u32 XNgrover64_Get_C(XNgrover64 *InstancePtr);

void XNgrover64_InterruptGlobalEnable(XNgrover64 *InstancePtr);
void XNgrover64_InterruptGlobalDisable(XNgrover64 *InstancePtr);
void XNgrover64_InterruptEnable(XNgrover64 *InstancePtr, u32 Mask);
void XNgrover64_InterruptDisable(XNgrover64 *InstancePtr, u32 Mask);
void XNgrover64_InterruptClear(XNgrover64 *InstancePtr, u32 Mask);
u32 XNgrover64_InterruptGetEnabled(XNgrover64 *InstancePtr);
u32 XNgrover64_InterruptGetStatus(XNgrover64 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
