#include "xhopfield_vitis_hw.h"
#include "xhopfield_vitis.h"
#include "xil_printf.h"
#include "sleep.h"
#include <stdio.h>
#include <math.h>
#include <xtime_l.h>
#include <time.h>
#include <xparameters.h>

void hopfield_vitis_2(float V[N1 * N1], float U_0[N1 * N1], float U_1[N1 * N1], float U_2[N1 * N1], float I[N1 * N1], float T[N1 * N1 * N1 * N1], float A, float B, float C)
{
    int x, i, y, j;
    float aux;

    for(x = 0; x < N1; x++)
    {
        for(i = 0; i < N1; i++)
        {
            aux = 0;
            for(y = 0; y < N1; y++)
            {
                for(j = 0; j < N1; j++)
                {
                    if (y != j)
                    {
                        aux = aux + T[x * N1 * N1 * N1 + i * N1 * N1 + y * N1 + j] * V[y * N1 + j];
                    }
                }
            }
            U_0[x * N1 + i] = U_1[x * N1 + i] - A * U_2[x * N1 + i] + B * aux + C * I[x * N1 + i];
        }
    }
}

void rhoxi(int rho[N1 * N1], float C_xi[N1 * N1])
{
	int x, i;

	for(x = 0; x < N1; x++)
	{
		for(i = 0; i < N1; i++)
		{
			if (C_xi[x * N1 + i] == 0)
			{
				rho[x * N1 + i] = 1;
			} else {
				rho[x * N1 + i] = 0;
			}

		}
	}

}

int deltak(int a, int b)
{
	if (a == b)
	{
		return 1;
	} else {
		return 0;
	}
}

void txiyj(int u3, int u4, float T[N1 * N1 * N1 * N1])
{
	int x, i, y, j;

	for(x = 0; x < N1; x++)
	{
		for(i = 0; i < N1; i++)
		{
			for(y = 0; y < N1; y++)
			{
				for(j = 0; j < N1; j++)
				{
					T[x * N1 * N1 * N1 + i * N1 * N1 + y * N1 + j] = u4 * deltak(x, y) * deltak(i, j) - u3 * (deltak(x, y) + deltak(i, j) - deltak(j, x) - deltak(i, y));
				}
			}
		}
	}
}

void ixi(int u1, int u2, int u4, int u5, float C_xi[N1 * N1], int rho[N1 * N1], int source, int destin, float I[N1 * N1])
{
	int x, i;

	for(x = 0; x < N1; x++)
	{
		for(i = 0; i < N1; i++)
		{
			if (x != i)
			{
				I[x * N1 + i] = - (u1 / 2) * C_xi[x * N1 + i] * (1 - deltak(x, destin) * deltak(i, source)) - (u2 / 2) * rho[x * N1 + i] * (1 - deltak(x, destin) * deltak(i, source)) - (u4/2) + (u5/2) * deltak(x, destin) * deltak(i, source);
			} else {
				I[x * N1 + i] = 0;
			}
		}
	}

}

float energy(int u1, int u2, int u3, int u4, int u5, float C_xi[N1 * N1], float V[N1 * N1], int rho[N1 * N1], int source, int destin)
{
	float E_1 = 0, E_2 = 0, E_3 = 0, E_4 = 0, E_5 = 0;
	float E_3_1, E_3_2;
	int x, i;

	for(x = 0; x < N1; x++)
	{
		E_3_1 = 0;
		E_3_2 = 0;
		for(i = 0; i < N1; i++)
		{
			if (x != i)
			{
				if ((x != destin) or (i != source))
				{
					E_1 += (u1/2) * C_xi[x * N1 + i] * V[x * N1 + i];
					E_2 += (u2/2) * rho[x * N1 + i] * V[x * N1 + i];
				}
				E_3_1 += (u3/2) * V[x * N1 + i];
				E_3_2 += (u3/2) * V[i * N1 + x];
				E_4 += (u4/2) * V[x * N1 + i] * (1 - V[x * N1 + i]);
			}
		}
		E_3 += pow(E_3_1 - E_3_2, 2);
	}
	E_5 = (u5 / 2) * (1 - V[destin * N1 + source]);

	return (E_1 + E_2 + E_3 + E_4 + E_5);
}

unsigned int float_to_u32(float val)
{
	unsigned int result;
	union float_bytes{
		float v;
		unsigned char bytes[4];
	} data;
	data.v = val;
	result = (data.bytes[3]<<24) + (data.bytes[2]<<16) + (data.bytes[1]<<8) + (data.bytes[0]);
	return result;
}

float u32_to_float(unsigned int val)
{
	union{
		float val_float;
		unsigned char bytes[4];
	} data;
	data.bytes[3] = (val >> (8 * 3)) & 0xff;
	data.bytes[2] = (val >> (8 * 2)) & 0xff;
	data.bytes[1] = (val >> (8 * 1)) & 0xff;
	data.bytes[0] = (val >> (8 * 0)) & 0xff;
	return data.val_float;
}

int main()
{
	XTime tStart;
	XTime tEnd;



	int status;
	XHopfield_vitis goHopfield_vitis;
	XHopfield_vitis_Config *goGrecia_cfg;

	goHopfield_vitis_cfg = XHopfield_vitis_LookupConfig(XPAR_HOPFIELD_VITIS_0_DEVICE_ID);
	if (!goHopfield_vitis_cfg){
		printf("Error cargando la configuración de goHopfield_vitis.\n");
	} else {
		printf("Hopfield_vitis configurado correctamente.\n");
	}

	status = XHopfield_vitis_CfgInitialize(&goHopfield_vitis, &goHopfield_vitis_cfg);
	if (status != XST_SUCCESS){
		printf("Error inicializando goHopfield_vitis.\n");
	} else {
		printf("Hopfield_vitis inicializado correctamente.\n");
	}

	XHopfield_vitis_Initialize(&goHopfield_vitis, XPAR_HOPFIELD_VITIS_0_DEVICE_ID);
	printf("\n");

	return 0;
}





























