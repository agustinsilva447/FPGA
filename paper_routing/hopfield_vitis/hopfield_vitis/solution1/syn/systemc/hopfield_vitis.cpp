// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "hopfield_vitis.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hopfield_vitis::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hopfield_vitis::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state1 = "1";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state2 = "10";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state3 = "100";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state4 = "1000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state5 = "10000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state6 = "100000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state7 = "1000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state8 = "10000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state9 = "100000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state10 = "1000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state11 = "10000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state12 = "100000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<39> hopfield_vitis::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<32> hopfield_vitis::ap_const_lv32_0 = "00000000000000000000000000000000";
const int hopfield_vitis::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> hopfield_vitis::ap_const_lv32_1 = "1";
const sc_lv<1> hopfield_vitis::ap_const_lv1_0 = "0";
const sc_lv<32> hopfield_vitis::ap_const_lv32_2 = "10";
const sc_lv<32> hopfield_vitis::ap_const_lv32_3 = "11";
const sc_lv<32> hopfield_vitis::ap_const_lv32_4 = "100";
const sc_lv<32> hopfield_vitis::ap_const_lv32_7 = "111";
const sc_lv<32> hopfield_vitis::ap_const_lv32_10 = "10000";
const sc_lv<32> hopfield_vitis::ap_const_lv32_15 = "10101";
const sc_lv<32> hopfield_vitis::ap_const_lv32_25 = "100101";
const sc_lv<4> hopfield_vitis::ap_const_lv4_0 = "0000";
const sc_lv<1> hopfield_vitis::ap_const_lv1_1 = "1";
const sc_lv<32> hopfield_vitis::ap_const_lv32_26 = "100110";
const sc_lv<4> hopfield_vitis::ap_const_lv4_F = "1111";
const sc_lv<32> hopfield_vitis::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<32> hopfield_vitis::ap_const_lv32_11 = "10001";
const sc_lv<32> hopfield_vitis::ap_const_lv32_16 = "10110";
const sc_lv<32> hopfield_vitis::ap_const_lv32_8 = "1000";
const sc_lv<4> hopfield_vitis::ap_const_lv4_8 = "1000";
const sc_lv<4> hopfield_vitis::ap_const_lv4_1 = "1";
const sc_lv<3> hopfield_vitis::ap_const_lv3_0 = "000";
const sc_lv<32> hopfield_vitis::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const bool hopfield_vitis::ap_const_boolean_1 = true;

hopfield_vitis::hopfield_vitis(sc_module_name name) : sc_module(name), mVcdFile(0) {
    hopfield_vitis_CRTL_BUS_s_axi_U = new hopfield_vitis_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("hopfield_vitis_CRTL_BUS_s_axi_U");
    hopfield_vitis_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    hopfield_vitis_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    hopfield_vitis_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    hopfield_vitis_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    hopfield_vitis_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    hopfield_vitis_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    hopfield_vitis_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    hopfield_vitis_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    hopfield_vitis_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    hopfield_vitis_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    hopfield_vitis_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    hopfield_vitis_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    hopfield_vitis_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    hopfield_vitis_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    hopfield_vitis_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    hopfield_vitis_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    hopfield_vitis_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    hopfield_vitis_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    hopfield_vitis_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    hopfield_vitis_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    hopfield_vitis_CRTL_BUS_s_axi_U->ap_start(ap_start);
    hopfield_vitis_CRTL_BUS_s_axi_U->interrupt(interrupt);
    hopfield_vitis_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    hopfield_vitis_CRTL_BUS_s_axi_U->ap_done(ap_done);
    hopfield_vitis_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    hopfield_vitis_CRTL_BUS_s_axi_U->l(l);
    hopfield_vitis_fabkb_U1 = new hopfield_vitis_fabkb<1,5,32,32,32>("hopfield_vitis_fabkb_U1");
    hopfield_vitis_fabkb_U1->clk(ap_clk);
    hopfield_vitis_fabkb_U1->reset(ap_rst_n_inv);
    hopfield_vitis_fabkb_U1->din0(tmp_i_i_reg_277);
    hopfield_vitis_fabkb_U1->din1(ap_var_for_const1);
    hopfield_vitis_fabkb_U1->ce(ap_var_for_const0);
    hopfield_vitis_fabkb_U1->dout(grp_fu_113_p2);
    hopfield_vitis_fmcud_U2 = new hopfield_vitis_fmcud<1,4,32,32,32>("hopfield_vitis_fmcud_U2");
    hopfield_vitis_fmcud_U2->clk(ap_clk);
    hopfield_vitis_fmcud_U2->reset(ap_rst_n_inv);
    hopfield_vitis_fmcud_U2->din0(grp_fu_118_p0);
    hopfield_vitis_fmcud_U2->din1(l_read_reg_217);
    hopfield_vitis_fmcud_U2->ce(ap_var_for_const0);
    hopfield_vitis_fmcud_U2->dout(grp_fu_118_p2);
    hopfield_vitis_fddEe_U3 = new hopfield_vitis_fddEe<1,16,32,32,32>("hopfield_vitis_fddEe_U3");
    hopfield_vitis_fddEe_U3->clk(ap_clk);
    hopfield_vitis_fddEe_U3->reset(ap_rst_n_inv);
    hopfield_vitis_fddEe_U3->din0(ap_var_for_const1);
    hopfield_vitis_fddEe_U3->din1(tmp_4_reg_282);
    hopfield_vitis_fddEe_U3->ce(ap_var_for_const0);
    hopfield_vitis_fddEe_U3->dout(grp_fu_122_p2);
    hopfield_vitis_feeOg_U4 = new hopfield_vitis_feeOg<1,9,32,32,32>("hopfield_vitis_feeOg_U4");
    hopfield_vitis_feeOg_U4->clk(ap_clk);
    hopfield_vitis_feeOg_U4->reset(ap_rst_n_inv);
    hopfield_vitis_feeOg_U4->din0(ap_var_for_const2);
    hopfield_vitis_feeOg_U4->din1(x_assign_reg_272);
    hopfield_vitis_feeOg_U4->ce(ap_var_for_const0);
    hopfield_vitis_feeOg_U4->dout(grp_fu_127_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_U_1_Addr_A);
    sensitive << ( U_1_Addr_A_orig );

    SC_METHOD(thread_U_1_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln23_fu_198_p1 );

    SC_METHOD(thread_U_1_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_U_1_Din_A);

    SC_METHOD(thread_U_1_EN_A);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_U_1_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_U_1_WEN_A);

    SC_METHOD(thread_V_Addr_A);
    sensitive << ( V_Addr_A_orig );

    SC_METHOD(thread_V_Addr_A_orig);
    sensitive << ( V_addr_reg_235 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln23_reg_252 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_V_Din_A);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_reg_287 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_V_EN_A);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_V_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_V_WEN_A);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln19_fu_187_p2 );
    sensitive << ( icmp_ln19_reg_248 );
    sensitive << ( icmp_ln17_fu_175_p2 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_add_ln21_fu_160_p2);
    sensitive << ( shl_ln_fu_152_p3 );
    sensitive << ( zext_ln15_fu_132_p1 );

    SC_METHOD(thread_add_ln23_fu_193_p2);
    sensitive << ( shl_ln_reg_230 );
    sensitive << ( zext_ln17_fu_171_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln15_fu_136_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln15_fu_136_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bitcast_ln23_fu_203_p1);
    sensitive << ( U_1_load_reg_262 );

    SC_METHOD(thread_grp_fu_118_p0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( xor_ln23_fu_206_p2 );

    SC_METHOD(thread_i_fu_181_p2);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln15_fu_136_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( x_0_reg_90 );

    SC_METHOD(thread_icmp_ln17_fu_175_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln19_fu_187_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln17_fu_175_p2 );
    sensitive << ( x_0_reg_90 );
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_shl_ln_fu_152_p3);
    sensitive << ( trunc_ln21_fu_148_p1 );

    SC_METHOD(thread_trunc_ln21_fu_148_p1);
    sensitive << ( x_0_reg_90 );

    SC_METHOD(thread_x_fu_142_p2);
    sensitive << ( x_0_reg_90 );

    SC_METHOD(thread_xor_ln23_fu_206_p2);
    sensitive << ( bitcast_ln23_fu_203_p1 );

    SC_METHOD(thread_zext_ln15_fu_132_p1);
    sensitive << ( x_0_reg_90 );

    SC_METHOD(thread_zext_ln17_fu_171_p1);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_zext_ln21_fu_166_p1);
    sensitive << ( add_ln21_fu_160_p2 );

    SC_METHOD(thread_zext_ln23_fu_198_p1);
    sensitive << ( add_ln23_fu_193_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln15_fu_136_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln19_fu_187_p2 );
    sensitive << ( icmp_ln17_fu_175_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hopfield_vitis_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, V_Addr_A, "(port)V_Addr_A");
    sc_trace(mVcdFile, V_EN_A, "(port)V_EN_A");
    sc_trace(mVcdFile, V_WEN_A, "(port)V_WEN_A");
    sc_trace(mVcdFile, V_Din_A, "(port)V_Din_A");
    sc_trace(mVcdFile, V_Dout_A, "(port)V_Dout_A");
    sc_trace(mVcdFile, V_Clk_A, "(port)V_Clk_A");
    sc_trace(mVcdFile, V_Rst_A, "(port)V_Rst_A");
    sc_trace(mVcdFile, U_1_Addr_A, "(port)U_1_Addr_A");
    sc_trace(mVcdFile, U_1_EN_A, "(port)U_1_EN_A");
    sc_trace(mVcdFile, U_1_WEN_A, "(port)U_1_WEN_A");
    sc_trace(mVcdFile, U_1_Din_A, "(port)U_1_Din_A");
    sc_trace(mVcdFile, U_1_Dout_A, "(port)U_1_Dout_A");
    sc_trace(mVcdFile, U_1_Clk_A, "(port)U_1_Clk_A");
    sc_trace(mVcdFile, U_1_Rst_A, "(port)U_1_Rst_A");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, l, "l");
    sc_trace(mVcdFile, l_read_reg_217, "l_read_reg_217");
    sc_trace(mVcdFile, x_fu_142_p2, "x_fu_142_p2");
    sc_trace(mVcdFile, x_reg_225, "x_reg_225");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, shl_ln_fu_152_p3, "shl_ln_fu_152_p3");
    sc_trace(mVcdFile, shl_ln_reg_230, "shl_ln_reg_230");
    sc_trace(mVcdFile, icmp_ln15_fu_136_p2, "icmp_ln15_fu_136_p2");
    sc_trace(mVcdFile, V_addr_reg_235, "V_addr_reg_235");
    sc_trace(mVcdFile, i_fu_181_p2, "i_fu_181_p2");
    sc_trace(mVcdFile, i_reg_243, "i_reg_243");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln19_fu_187_p2, "icmp_ln19_fu_187_p2");
    sc_trace(mVcdFile, icmp_ln19_reg_248, "icmp_ln19_reg_248");
    sc_trace(mVcdFile, icmp_ln17_fu_175_p2, "icmp_ln17_fu_175_p2");
    sc_trace(mVcdFile, zext_ln23_fu_198_p1, "zext_ln23_fu_198_p1");
    sc_trace(mVcdFile, zext_ln23_reg_252, "zext_ln23_reg_252");
    sc_trace(mVcdFile, U_1_load_reg_262, "U_1_load_reg_262");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_118_p2, "grp_fu_118_p2");
    sc_trace(mVcdFile, x_assign_reg_272, "x_assign_reg_272");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_127_p2, "grp_fu_127_p2");
    sc_trace(mVcdFile, tmp_i_i_reg_277, "tmp_i_i_reg_277");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_fu_113_p2, "grp_fu_113_p2");
    sc_trace(mVcdFile, tmp_4_reg_282, "tmp_4_reg_282");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_122_p2, "grp_fu_122_p2");
    sc_trace(mVcdFile, tmp_5_reg_287, "tmp_5_reg_287");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, x_0_reg_90, "x_0_reg_90");
    sc_trace(mVcdFile, i_0_reg_102, "i_0_reg_102");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, zext_ln21_fu_166_p1, "zext_ln21_fu_166_p1");
    sc_trace(mVcdFile, U_1_Addr_A_orig, "U_1_Addr_A_orig");
    sc_trace(mVcdFile, V_Addr_A_orig, "V_Addr_A_orig");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, grp_fu_118_p0, "grp_fu_118_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, trunc_ln21_fu_148_p1, "trunc_ln21_fu_148_p1");
    sc_trace(mVcdFile, zext_ln15_fu_132_p1, "zext_ln15_fu_132_p1");
    sc_trace(mVcdFile, add_ln21_fu_160_p2, "add_ln21_fu_160_p2");
    sc_trace(mVcdFile, zext_ln17_fu_171_p1, "zext_ln17_fu_171_p1");
    sc_trace(mVcdFile, add_ln23_fu_193_p2, "add_ln23_fu_193_p2");
    sc_trace(mVcdFile, bitcast_ln23_fu_203_p1, "bitcast_ln23_fu_203_p1");
    sc_trace(mVcdFile, xor_ln23_fu_206_p2, "xor_ln23_fu_206_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("hopfield_vitis.hdltvin.dat");
    mHdltvoutHandle.open("hopfield_vitis.hdltvout.dat");
}

hopfield_vitis::~hopfield_vitis() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete hopfield_vitis_CRTL_BUS_s_axi_U;
    delete hopfield_vitis_fabkb_U1;
    delete hopfield_vitis_fmcud_U2;
    delete hopfield_vitis_fddEe_U3;
    delete hopfield_vitis_feeOg_U4;
}

void hopfield_vitis::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void hopfield_vitis::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void hopfield_vitis::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_3F800000;
}

void hopfield_vitis::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_136_p2.read(), ap_const_lv1_0))) {
        i_0_reg_102 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        i_0_reg_102 = i_reg_243.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_175_p2.read(), ap_const_lv1_1))) {
        x_0_reg_90 = x_reg_225.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        x_0_reg_90 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_1_load_reg_262 = U_1_Dout_A.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln15_fu_136_p2.read(), ap_const_lv1_0))) {
        V_addr_reg_235 =  (sc_lv<6>) (zext_ln21_fu_166_p1.read());
        shl_ln_reg_230 = shl_ln_fu_152_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_243 = i_fu_181_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_175_p2.read()))) {
        icmp_ln19_reg_248 = icmp_ln19_fu_187_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        l_read_reg_217 = l.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        tmp_4_reg_282 = grp_fu_113_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        tmp_5_reg_287 = grp_fu_122_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        tmp_i_i_reg_277 = grp_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        x_assign_reg_272 = grp_fu_118_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_reg_225 = x_fu_142_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_175_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_187_p2.read()))) {
        zext_ln23_reg_252 = zext_ln23_fu_198_p1.read();
    }
}

void hopfield_vitis::thread_U_1_Addr_A() {
    U_1_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): U_1_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void hopfield_vitis::thread_U_1_Addr_A_orig() {
    U_1_Addr_A_orig =  (sc_lv<32>) (zext_ln23_fu_198_p1.read());
}

void hopfield_vitis::thread_U_1_Clk_A() {
    U_1_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void hopfield_vitis::thread_U_1_Din_A() {
    U_1_Din_A = ap_const_lv32_0;
}

void hopfield_vitis::thread_U_1_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        U_1_EN_A = ap_const_logic_1;
    } else {
        U_1_EN_A = ap_const_logic_0;
    }
}

void hopfield_vitis::thread_U_1_Rst_A() {
    U_1_Rst_A = ap_rst_n_inv.read();
}

void hopfield_vitis::thread_U_1_WEN_A() {
    U_1_WEN_A = ap_const_lv4_0;
}

void hopfield_vitis::thread_V_Addr_A() {
    V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void hopfield_vitis::thread_V_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        V_Addr_A_orig =  (sc_lv<32>) (zext_ln23_reg_252.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        V_Addr_A_orig =  (sc_lv<32>) (V_addr_reg_235.read());
    } else {
        V_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void hopfield_vitis::thread_V_Clk_A() {
    V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void hopfield_vitis::thread_V_Din_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        V_Din_A = tmp_5_reg_287.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        V_Din_A = ap_const_lv32_0;
    } else {
        V_Din_A = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void hopfield_vitis::thread_V_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        V_EN_A = ap_const_logic_1;
    } else {
        V_EN_A = ap_const_logic_0;
    }
}

void hopfield_vitis::thread_V_Rst_A() {
    V_Rst_A = ap_rst_n_inv.read();
}

void hopfield_vitis::thread_V_WEN_A() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_reg_248.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_175_p2.read()) && 
          esl_seteq<1,1,1>(icmp_ln19_fu_187_p2.read(), ap_const_lv1_1)))) {
        V_WEN_A = ap_const_lv4_F;
    } else {
        V_WEN_A = ap_const_lv4_0;
    }
}

void hopfield_vitis::thread_add_ln21_fu_160_p2() {
    add_ln21_fu_160_p2 = (!shl_ln_fu_152_p3.read().is_01() || !zext_ln15_fu_132_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(shl_ln_fu_152_p3.read()) + sc_biguint<6>(zext_ln15_fu_132_p1.read()));
}

void hopfield_vitis::thread_add_ln23_fu_193_p2() {
    add_ln23_fu_193_p2 = (!zext_ln17_fu_171_p1.read().is_01() || !shl_ln_reg_230.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln17_fu_171_p1.read()) + sc_biguint<6>(shl_ln_reg_230.read()));
}

void hopfield_vitis::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void hopfield_vitis::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void hopfield_vitis::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void hopfield_vitis::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void hopfield_vitis::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void hopfield_vitis::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void hopfield_vitis::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void hopfield_vitis::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void hopfield_vitis::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void hopfield_vitis::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void hopfield_vitis::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void hopfield_vitis::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void hopfield_vitis::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void hopfield_vitis::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_136_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void hopfield_vitis::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hopfield_vitis::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_136_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hopfield_vitis::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void hopfield_vitis::thread_bitcast_ln23_fu_203_p1() {
    bitcast_ln23_fu_203_p1 = U_1_load_reg_262.read();
}

void hopfield_vitis::thread_grp_fu_118_p0() {
    grp_fu_118_p0 = xor_ln23_fu_206_p2.read();
}

void hopfield_vitis::thread_i_fu_181_p2() {
    i_fu_181_p2 = (!i_0_reg_102.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_102.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void hopfield_vitis::thread_icmp_ln15_fu_136_p2() {
    icmp_ln15_fu_136_p2 = (!x_0_reg_90.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(x_0_reg_90.read() == ap_const_lv4_8);
}

void hopfield_vitis::thread_icmp_ln17_fu_175_p2() {
    icmp_ln17_fu_175_p2 = (!i_0_reg_102.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_102.read() == ap_const_lv4_8);
}

void hopfield_vitis::thread_icmp_ln19_fu_187_p2() {
    icmp_ln19_fu_187_p2 = (!x_0_reg_90.read().is_01() || !i_0_reg_102.read().is_01())? sc_lv<1>(): sc_lv<1>(x_0_reg_90.read() == i_0_reg_102.read());
}

void hopfield_vitis::thread_shl_ln_fu_152_p3() {
    shl_ln_fu_152_p3 = esl_concat<3,3>(trunc_ln21_fu_148_p1.read(), ap_const_lv3_0);
}

void hopfield_vitis::thread_trunc_ln21_fu_148_p1() {
    trunc_ln21_fu_148_p1 = x_0_reg_90.read().range(3-1, 0);
}

void hopfield_vitis::thread_x_fu_142_p2() {
    x_fu_142_p2 = (!x_0_reg_90.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(x_0_reg_90.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void hopfield_vitis::thread_xor_ln23_fu_206_p2() {
    xor_ln23_fu_206_p2 = (bitcast_ln23_fu_203_p1.read() ^ ap_const_lv32_80000000);
}

void hopfield_vitis::thread_zext_ln15_fu_132_p1() {
    zext_ln15_fu_132_p1 = esl_zext<6,4>(x_0_reg_90.read());
}

void hopfield_vitis::thread_zext_ln17_fu_171_p1() {
    zext_ln17_fu_171_p1 = esl_zext<6,4>(i_0_reg_102.read());
}

void hopfield_vitis::thread_zext_ln21_fu_166_p1() {
    zext_ln21_fu_166_p1 = esl_zext<64,6>(add_ln21_fu_160_p2.read());
}

void hopfield_vitis::thread_zext_ln23_fu_198_p1() {
    zext_ln23_fu_198_p1 = esl_zext<64,6>(add_ln23_fu_193_p2.read());
}

void hopfield_vitis::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln15_fu_136_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_175_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_175_p2.read()) && esl_seteq<1,1,1>(icmp_ln19_fu_187_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state39;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<39>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void hopfield_vitis::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"V_Addr_A\" :  \"" << V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_EN_A\" :  \"" << V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_WEN_A\" :  \"" << V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Din_A\" :  \"" << V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_Dout_A\" :  \"" << V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Clk_A\" :  \"" << V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Rst_A\" :  \"" << V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"U_1_Addr_A\" :  \"" << U_1_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"U_1_EN_A\" :  \"" << U_1_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"U_1_WEN_A\" :  \"" << U_1_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"U_1_Din_A\" :  \"" << U_1_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"U_1_Dout_A\" :  \"" << U_1_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"U_1_Clk_A\" :  \"" << U_1_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"U_1_Rst_A\" :  \"" << U_1_Rst_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

