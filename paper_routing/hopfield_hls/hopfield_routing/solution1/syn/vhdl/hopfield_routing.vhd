-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hopfield_routing is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    V_ce0 : OUT STD_LOGIC;
    V_we0 : OUT STD_LOGIC;
    V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    U_0_ce0 : OUT STD_LOGIC;
    U_0_we0 : OUT STD_LOGIC;
    U_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    U_1_ce0 : OUT STD_LOGIC;
    U_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    U_2_ce0 : OUT STD_LOGIC;
    U_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    I_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    I_ce0 : OUT STD_LOGIC;
    I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    T_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    T_ce0 : OUT STD_LOGIC;
    T_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A : IN STD_LOGIC_VECTOR (31 downto 0);
    B : IN STD_LOGIC_VECTOR (31 downto 0);
    C : IN STD_LOGIC_VECTOR (31 downto 0);
    l : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hopfield_routing is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hopfield_routing,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.399750,HLS_SYN_LAT=48871,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=2308,HLS_SYN_LUT=4075,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (78 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (78 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (78 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (78 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (78 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (78 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (78 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (78 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (78 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (78 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal icmp_ln41_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shl_ln_fu_337_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_565 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln19_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal V_addr_reg_570 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_366_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_578 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln23_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln27_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_reg_587 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln27_1_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal x_2_fu_409_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_2_reg_615 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal trunc_ln47_fu_415_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln47_reg_620 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln32_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1_fu_419_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_reg_625 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_fu_427_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_reg_630 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i_2_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_638 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln43_fu_443_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_reg_643 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln34_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_453_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_651 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal shl_ln2_fu_463_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln2_reg_656 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln37_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln47_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_661 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_490_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_676 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_ln41_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal T_load_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal V_load_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal aux_2_fu_525_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal U_2_load_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal tmp_6_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal I_load_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal x_0_reg_182 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal x_1_reg_205 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_216 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal y_0_reg_227 : STD_LOGIC_VECTOR (3 downto 0);
    signal aux_0_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_251 : STD_LOGIC_VECTOR (3 downto 0);
    signal aux_1_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_1_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln25_fu_333_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln19_fu_317_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln25_fu_345_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_fu_356_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_fu_378_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln27_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln27_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln43_1_fu_459_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln47_fu_471_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln39_fu_480_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln43_fu_502_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln43_2_fu_507_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_274_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (78 downto 0);

    component hopfield_routing_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hopfield_routing_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hopfield_routing_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hopfield_routing_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hopfield_routing_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hopfield_routing_bkb_U1 : component hopfield_routing_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_274_p0,
        din1 => grp_fu_274_p1,
        opcode => grp_fu_274_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    hopfield_routing_cud_U2 : component hopfield_routing_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_280_p0,
        din1 => grp_fu_280_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);

    hopfield_routing_dEe_U3 : component hopfield_routing_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_310,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    hopfield_routing_eOg_U4 : component hopfield_routing_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p1);

    hopfield_routing_fYi_U5 : component hopfield_routing_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_304,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    aux_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                aux_0_reg_239 <= aux_1_reg_262;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln34_fu_431_p2 = ap_const_lv1_0))) then 
                aux_0_reg_239 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    aux_1_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln37_fu_447_p2 = ap_const_lv1_0))) then 
                aux_1_reg_262 <= aux_0_reg_239;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                aux_1_reg_262 <= aux_2_fu_525_p3;
            end if; 
        end if;
    end process;

    i_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln19_fu_321_p2 = ap_const_lv1_0))) then 
                i_0_reg_194 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_0_reg_194 <= i_reg_578;
            end if; 
        end if;
    end process;

    i_1_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln32_fu_403_p2 = ap_const_lv1_0))) then 
                i_1_reg_216 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                i_1_reg_216 <= i_2_reg_638;
            end if; 
        end if;
    end process;

    j_0_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln37_fu_447_p2 = ap_const_lv1_0))) then 
                j_0_reg_251 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                j_0_reg_251 <= j_reg_676;
            end if; 
        end if;
    end process;

    x_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x_0_reg_182 <= x_reg_560;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x_0_reg_182 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    x_1_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                x_1_reg_205 <= ap_const_lv4_0;
            elsif (((icmp_ln34_fu_431_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                x_1_reg_205 <= x_2_reg_615;
            end if; 
        end if;
    end process;

    y_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                y_0_reg_227 <= y_reg_651;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln34_fu_431_p2 = ap_const_lv1_0))) then 
                y_0_reg_227 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                I_load_reg_731 <= I_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                T_load_reg_696 <= T_q0;
                V_load_reg_701 <= V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                U_2_load_reg_711 <= U_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln19_fu_321_p2 = ap_const_lv1_0))) then
                V_addr_reg_570 <= zext_ln25_fu_351_p1(6 - 1 downto 0);
                    shl_ln_reg_565(5 downto 3) <= shl_ln_fu_337_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                i_2_reg_638 <= i_2_fu_437_p2;
                    zext_ln34_reg_630(3 downto 0) <= zext_ln34_fu_427_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_578 <= i_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln21_fu_360_p2 = ap_const_lv1_0))) then
                icmp_ln23_reg_583 <= icmp_ln23_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and (icmp_ln39_fu_484_p2 = ap_const_lv1_0))) then
                icmp_ln41_reg_681 <= icmp_ln41_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                j_reg_676 <= j_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_299 <= U_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln41_reg_681 = ap_const_lv1_0)))) then
                reg_304 <= grp_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state73))) then
                reg_310 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln32_fu_403_p2 = ap_const_lv1_0))) then
                    shl_ln1_reg_625(5 downto 3) <= shl_ln1_fu_419_p3(5 downto 3);
                trunc_ln47_reg_620 <= trunc_ln47_fu_415_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln37_fu_447_p2 = ap_const_lv1_0))) then
                    shl_ln2_reg_656(5 downto 3) <= shl_ln2_fu_463_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                tmp_5_reg_607 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                tmp_6_reg_721 <= grp_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_i_i_reg_602 <= grp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_552 <= grp_fu_290_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln34_fu_431_p2 = ap_const_lv1_0))) then
                trunc_ln43_reg_643 <= trunc_ln43_fu_443_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                x_2_reg_615 <= x_2_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                x_reg_560 <= x_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                y_reg_651 <= y_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln21_fu_360_p2 = ap_const_lv1_0) and (icmp_ln23_fu_372_p2 = ap_const_lv1_0))) then
                    zext_ln27_reg_587(5 downto 0) <= zext_ln27_fu_383_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    zext_ln47_reg_661(5 downto 0) <= zext_ln47_fu_475_p1(5 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_565(2 downto 0) <= "000";
    zext_ln27_reg_587(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    shl_ln1_reg_625(2 downto 0) <= "000";
    zext_ln34_reg_630(5 downto 4) <= "00";
    shl_ln2_reg_656(2 downto 0) <= "000";
    zext_ln47_reg_661(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln19_fu_321_p2, ap_CS_fsm_state8, icmp_ln23_fu_372_p2, icmp_ln21_fu_360_p2, ap_CS_fsm_state45, icmp_ln32_fu_403_p2, ap_CS_fsm_state46, icmp_ln34_fu_431_p2, ap_CS_fsm_state47, icmp_ln37_fu_447_p2, ap_CS_fsm_state48, icmp_ln39_fu_484_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln19_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln21_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((icmp_ln23_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln21_fu_360_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln32_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln34_fu_431_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln37_fu_447_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln39_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    I_address0 <= zext_ln47_reg_661(6 - 1 downto 0);

    I_ce0_assign_proc : process(ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            I_ce0 <= ap_const_logic_1;
        else 
            I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    T_address0 <= zext_ln43_fu_515_p1(12 - 1 downto 0);

    T_ce0_assign_proc : process(ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            T_ce0 <= ap_const_logic_1;
        else 
            T_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    U_0_address0 <= zext_ln47_reg_661(6 - 1 downto 0);

    U_0_ce0_assign_proc : process(ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            U_0_ce0 <= ap_const_logic_1;
        else 
            U_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    U_0_d0 <= reg_310;

    U_0_we0_assign_proc : process(ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            U_0_we0 <= ap_const_logic_1;
        else 
            U_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_1_address0_assign_proc : process(ap_CS_fsm_state62, ap_CS_fsm_state8, zext_ln27_fu_383_p1, zext_ln47_reg_661)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            U_1_address0 <= zext_ln47_reg_661(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            U_1_address0 <= zext_ln27_fu_383_p1(6 - 1 downto 0);
        else 
            U_1_address0 <= "XXXXXX";
        end if; 
    end process;


    U_1_ce0_assign_proc : process(ap_CS_fsm_state62, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            U_1_ce0 <= ap_const_logic_1;
        else 
            U_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    U_2_address0 <= zext_ln47_fu_475_p1(6 - 1 downto 0);

    U_2_ce0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            U_2_ce0 <= ap_const_logic_1;
        else 
            U_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_address0_assign_proc : process(V_addr_reg_570, ap_CS_fsm_state8, zext_ln27_reg_587, ap_CS_fsm_state48, ap_CS_fsm_state44, zext_ln43_1_fu_520_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            V_address0 <= zext_ln43_1_fu_520_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            V_address0 <= zext_ln27_reg_587(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            V_address0 <= V_addr_reg_570;
        else 
            V_address0 <= "XXXXXX";
        end if; 
    end process;


    V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            V_ce0 <= ap_const_logic_1;
        else 
            V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_d0_assign_proc : process(ap_CS_fsm_state8, tmp_5_reg_607, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            V_d0 <= tmp_5_reg_607;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            V_d0 <= ap_const_lv32_0;
        else 
            V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    V_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln23_fu_372_p2, icmp_ln23_reg_583, icmp_ln21_fu_360_p2, ap_CS_fsm_state44)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln23_reg_583 = ap_const_lv1_0)) or ((icmp_ln23_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln21_fu_360_p2 = ap_const_lv1_0)))) then 
            V_we0 <= ap_const_logic_1;
        else 
            V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln25_fu_345_p2 <= std_logic_vector(unsigned(shl_ln_fu_337_p3) + unsigned(zext_ln19_fu_317_p1));
    add_ln27_fu_378_p2 <= std_logic_vector(unsigned(zext_ln21_fu_356_p1) + unsigned(shl_ln_reg_565));
    add_ln43_2_fu_507_p4 <= ((trunc_ln47_reg_620 & trunc_ln43_reg_643) & add_ln43_fu_502_p2);
    add_ln43_fu_502_p2 <= std_logic_vector(unsigned(zext_ln39_fu_480_p1) + unsigned(shl_ln2_reg_656));
    add_ln47_fu_471_p2 <= std_logic_vector(unsigned(shl_ln1_reg_625) + unsigned(zext_ln34_reg_630));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state45, icmp_ln32_fu_403_p2)
    begin
        if (((icmp_ln32_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state45, icmp_ln32_fu_403_p2)
    begin
        if (((icmp_ln32_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    aux_2_fu_525_p3 <= 
        aux_1_reg_262 when (icmp_ln41_reg_681(0) = '1') else 
        grp_fu_274_p2;
    bitcast_ln27_1_fu_398_p1 <= xor_ln27_fu_392_p2;
    bitcast_ln27_fu_388_p1 <= reg_299;

    grp_fu_274_opcode_assign_proc : process(icmp_ln41_reg_681, ap_CS_fsm_state69, ap_CS_fsm_state23, ap_CS_fsm_state54, ap_CS_fsm_state64, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_274_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state69) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (icmp_ln41_reg_681 = ap_const_lv1_0)))) then 
            grp_fu_274_opcode <= ap_const_lv2_0;
        else 
            grp_fu_274_opcode <= "XX";
        end if; 
    end process;


    grp_fu_274_p0_assign_proc : process(reg_299, reg_310, tmp_i_i_reg_602, ap_CS_fsm_state69, aux_1_reg_262, ap_CS_fsm_state23, ap_CS_fsm_state54, ap_CS_fsm_state64, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            grp_fu_274_p0 <= reg_310;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_274_p0 <= reg_299;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_274_p0 <= aux_1_reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_274_p0 <= tmp_i_i_reg_602;
        else 
            grp_fu_274_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_274_p1_assign_proc : process(reg_304, tmp_6_reg_721, ap_CS_fsm_state69, ap_CS_fsm_state23, ap_CS_fsm_state54, ap_CS_fsm_state64, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_274_p1 <= tmp_6_reg_721;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            grp_fu_274_p1 <= reg_304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_274_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_274_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_280_p0_assign_proc : process(bitcast_ln27_1_fu_398_p1, ap_CS_fsm_state10, T_load_reg_696, U_2_load_reg_711, ap_CS_fsm_state59, I_load_reg_731, aux_0_reg_239, ap_CS_fsm_state50, ap_CS_fsm_state60, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_280_p0 <= I_load_reg_731;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_280_p0 <= U_2_load_reg_711;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_280_p0 <= aux_0_reg_239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_280_p0 <= T_load_reg_696;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_280_p0 <= bitcast_ln27_1_fu_398_p1;
        else 
            grp_fu_280_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_280_p1_assign_proc : process(A, B, C, tmp_reg_552, ap_CS_fsm_state10, V_load_reg_701, ap_CS_fsm_state59, ap_CS_fsm_state50, ap_CS_fsm_state60, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_280_p1 <= C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_280_p1 <= A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_280_p1 <= B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_280_p1 <= V_load_reg_701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_280_p1 <= tmp_reg_552;
        else 
            grp_fu_280_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_fu_437_p2 <= std_logic_vector(unsigned(i_1_reg_216) + unsigned(ap_const_lv4_1));
    i_fu_366_p2 <= std_logic_vector(unsigned(i_0_reg_194) + unsigned(ap_const_lv4_1));
    icmp_ln19_fu_321_p2 <= "1" when (x_0_reg_182 = ap_const_lv4_8) else "0";
    icmp_ln21_fu_360_p2 <= "1" when (i_0_reg_194 = ap_const_lv4_8) else "0";
    icmp_ln23_fu_372_p2 <= "1" when (x_0_reg_182 = i_0_reg_194) else "0";
    icmp_ln32_fu_403_p2 <= "1" when (x_1_reg_205 = ap_const_lv4_8) else "0";
    icmp_ln34_fu_431_p2 <= "1" when (i_1_reg_216 = ap_const_lv4_8) else "0";
    icmp_ln37_fu_447_p2 <= "1" when (y_0_reg_227 = ap_const_lv4_8) else "0";
    icmp_ln39_fu_484_p2 <= "1" when (j_0_reg_251 = ap_const_lv4_8) else "0";
    icmp_ln41_fu_496_p2 <= "1" when (y_0_reg_227 = j_0_reg_251) else "0";
    j_fu_490_p2 <= std_logic_vector(unsigned(j_0_reg_251) + unsigned(ap_const_lv4_1));
    shl_ln1_fu_419_p3 <= (trunc_ln47_fu_415_p1 & ap_const_lv3_0);
    shl_ln2_fu_463_p3 <= (trunc_ln43_1_fu_459_p1 & ap_const_lv3_0);
    shl_ln_fu_337_p3 <= (trunc_ln25_fu_333_p1 & ap_const_lv3_0);
    trunc_ln25_fu_333_p1 <= x_0_reg_182(3 - 1 downto 0);
    trunc_ln43_1_fu_459_p1 <= y_0_reg_227(3 - 1 downto 0);
    trunc_ln43_fu_443_p1 <= i_1_reg_216(3 - 1 downto 0);
    trunc_ln47_fu_415_p1 <= x_1_reg_205(3 - 1 downto 0);
    x_2_fu_409_p2 <= std_logic_vector(unsigned(x_1_reg_205) + unsigned(ap_const_lv4_1));
    x_fu_327_p2 <= std_logic_vector(unsigned(x_0_reg_182) + unsigned(ap_const_lv4_1));
    xor_ln27_fu_392_p2 <= (bitcast_ln27_fu_388_p1 xor ap_const_lv32_80000000);
    y_fu_453_p2 <= std_logic_vector(unsigned(y_0_reg_227) + unsigned(ap_const_lv4_1));
    zext_ln19_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_182),6));
    zext_ln21_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_194),6));
    zext_ln25_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_fu_345_p2),64));
    zext_ln27_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_378_p2),64));
    zext_ln34_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_216),6));
    zext_ln39_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_251),6));
    zext_ln43_1_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_502_p2),64));
    zext_ln43_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_2_fu_507_p4),64));
    zext_ln47_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_fu_471_p2),64));
end behav;
