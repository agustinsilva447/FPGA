// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hopfield_routing,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.399750,HLS_SYN_LAT=48876,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=3057,HLS_SYN_LUT=5218,HLS_VERSION=2019_2}" *)

module hopfield_routing (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        V_address0,
        V_ce0,
        V_we0,
        V_d0,
        V_q0,
        U_0_address0,
        U_0_ce0,
        U_0_we0,
        U_0_d0,
        U_1_address0,
        U_1_ce0,
        U_1_q0,
        U_2_address0,
        U_2_ce0,
        U_2_q0,
        I_address0,
        I_ce0,
        I_q0,
        T_address0,
        T_ce0,
        T_q0,
        A,
        B,
        C,
        l
);

parameter    ap_ST_fsm_state1 = 84'd1;
parameter    ap_ST_fsm_state2 = 84'd2;
parameter    ap_ST_fsm_state3 = 84'd4;
parameter    ap_ST_fsm_state4 = 84'd8;
parameter    ap_ST_fsm_state5 = 84'd16;
parameter    ap_ST_fsm_state6 = 84'd32;
parameter    ap_ST_fsm_state7 = 84'd64;
parameter    ap_ST_fsm_state8 = 84'd128;
parameter    ap_ST_fsm_state9 = 84'd256;
parameter    ap_ST_fsm_state10 = 84'd512;
parameter    ap_ST_fsm_state11 = 84'd1024;
parameter    ap_ST_fsm_state12 = 84'd2048;
parameter    ap_ST_fsm_state13 = 84'd4096;
parameter    ap_ST_fsm_state14 = 84'd8192;
parameter    ap_ST_fsm_state15 = 84'd16384;
parameter    ap_ST_fsm_state16 = 84'd32768;
parameter    ap_ST_fsm_state17 = 84'd65536;
parameter    ap_ST_fsm_state18 = 84'd131072;
parameter    ap_ST_fsm_state19 = 84'd262144;
parameter    ap_ST_fsm_state20 = 84'd524288;
parameter    ap_ST_fsm_state21 = 84'd1048576;
parameter    ap_ST_fsm_state22 = 84'd2097152;
parameter    ap_ST_fsm_state23 = 84'd4194304;
parameter    ap_ST_fsm_state24 = 84'd8388608;
parameter    ap_ST_fsm_state25 = 84'd16777216;
parameter    ap_ST_fsm_state26 = 84'd33554432;
parameter    ap_ST_fsm_state27 = 84'd67108864;
parameter    ap_ST_fsm_state28 = 84'd134217728;
parameter    ap_ST_fsm_state29 = 84'd268435456;
parameter    ap_ST_fsm_state30 = 84'd536870912;
parameter    ap_ST_fsm_state31 = 84'd1073741824;
parameter    ap_ST_fsm_state32 = 84'd2147483648;
parameter    ap_ST_fsm_state33 = 84'd4294967296;
parameter    ap_ST_fsm_state34 = 84'd8589934592;
parameter    ap_ST_fsm_state35 = 84'd17179869184;
parameter    ap_ST_fsm_state36 = 84'd34359738368;
parameter    ap_ST_fsm_state37 = 84'd68719476736;
parameter    ap_ST_fsm_state38 = 84'd137438953472;
parameter    ap_ST_fsm_state39 = 84'd274877906944;
parameter    ap_ST_fsm_state40 = 84'd549755813888;
parameter    ap_ST_fsm_state41 = 84'd1099511627776;
parameter    ap_ST_fsm_state42 = 84'd2199023255552;
parameter    ap_ST_fsm_state43 = 84'd4398046511104;
parameter    ap_ST_fsm_state44 = 84'd8796093022208;
parameter    ap_ST_fsm_state45 = 84'd17592186044416;
parameter    ap_ST_fsm_state46 = 84'd35184372088832;
parameter    ap_ST_fsm_state47 = 84'd70368744177664;
parameter    ap_ST_fsm_state48 = 84'd140737488355328;
parameter    ap_ST_fsm_state49 = 84'd281474976710656;
parameter    ap_ST_fsm_state50 = 84'd562949953421312;
parameter    ap_ST_fsm_state51 = 84'd1125899906842624;
parameter    ap_ST_fsm_state52 = 84'd2251799813685248;
parameter    ap_ST_fsm_state53 = 84'd4503599627370496;
parameter    ap_ST_fsm_state54 = 84'd9007199254740992;
parameter    ap_ST_fsm_state55 = 84'd18014398509481984;
parameter    ap_ST_fsm_state56 = 84'd36028797018963968;
parameter    ap_ST_fsm_state57 = 84'd72057594037927936;
parameter    ap_ST_fsm_state58 = 84'd144115188075855872;
parameter    ap_ST_fsm_state59 = 84'd288230376151711744;
parameter    ap_ST_fsm_state60 = 84'd576460752303423488;
parameter    ap_ST_fsm_state61 = 84'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 84'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 84'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 84'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 84'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 84'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 84'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 84'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 84'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 84'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 84'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 84'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 84'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 84'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 84'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 84'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 84'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 84'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 84'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 84'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 84'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 84'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 84'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 84'd9671406556917033397649408;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] V_address0;
output   V_ce0;
output   V_we0;
output  [31:0] V_d0;
input  [31:0] V_q0;
output  [5:0] U_0_address0;
output   U_0_ce0;
output   U_0_we0;
output  [31:0] U_0_d0;
output  [5:0] U_1_address0;
output   U_1_ce0;
input  [31:0] U_1_q0;
output  [5:0] U_2_address0;
output   U_2_ce0;
input  [31:0] U_2_q0;
output  [5:0] I_address0;
output   I_ce0;
input  [31:0] I_q0;
output  [11:0] T_address0;
output   T_ce0;
input  [31:0] T_q0;
input  [31:0] A;
input  [31:0] B;
input  [31:0] C;
input  [31:0] l;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] V_address0;
reg V_ce0;
reg V_we0;
reg[31:0] V_d0;
reg U_0_ce0;
reg U_0_we0;
reg[5:0] U_1_address0;
reg U_1_ce0;
reg U_2_ce0;
reg I_ce0;
reg T_ce0;

(* fsm_encoding = "none" *) reg   [83:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_288_p1;
reg   [31:0] reg_303;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state49;
reg   [31:0] reg_309;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state68;
wire   [31:0] grp_fu_278_p2;
reg   [31:0] reg_314;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state58;
reg   [0:0] icmp_ln41_reg_696;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state78;
wire   [31:0] grp_fu_272_p2;
reg   [31:0] reg_320;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state83;
wire   [3:0] x_fu_337_p2;
reg   [3:0] x_reg_565;
wire    ap_CS_fsm_state7;
wire   [5:0] shl_ln_fu_347_p3;
reg   [5:0] shl_ln_reg_570;
wire   [0:0] icmp_ln19_fu_331_p2;
reg   [5:0] V_addr_reg_575;
wire   [3:0] i_fu_376_p2;
reg   [3:0] i_reg_583;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln23_fu_382_p2;
reg   [0:0] icmp_ln23_reg_588;
wire   [0:0] icmp_ln21_fu_370_p2;
wire   [63:0] zext_ln27_fu_393_p1;
reg   [63:0] zext_ln27_reg_592;
wire   [31:0] bitcast_ln27_1_fu_408_p1;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] tmp_i_i_reg_607;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_283_p2;
reg   [31:0] tmp_8_reg_612;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_fu_292_p1;
reg   [31:0] tmp_2_reg_617;
wire   [31:0] grp_fu_295_p1;
reg   [31:0] tmp_3_reg_622;
wire   [3:0] x_2_fu_419_p2;
reg   [3:0] x_2_reg_630;
wire    ap_CS_fsm_state50;
wire   [2:0] trunc_ln47_fu_425_p1;
reg   [2:0] trunc_ln47_reg_635;
wire   [0:0] icmp_ln32_fu_413_p2;
wire   [5:0] shl_ln1_fu_429_p3;
reg   [5:0] shl_ln1_reg_640;
wire   [5:0] zext_ln34_fu_437_p1;
reg   [5:0] zext_ln34_reg_645;
wire    ap_CS_fsm_state51;
wire   [3:0] i_2_fu_447_p2;
reg   [3:0] i_2_reg_653;
wire   [2:0] trunc_ln43_fu_453_p1;
reg   [2:0] trunc_ln43_reg_658;
wire   [0:0] icmp_ln34_fu_441_p2;
wire   [3:0] y_fu_463_p2;
reg   [3:0] y_reg_666;
wire    ap_CS_fsm_state52;
wire   [5:0] shl_ln2_fu_473_p3;
reg   [5:0] shl_ln2_reg_671;
wire   [0:0] icmp_ln37_fu_457_p2;
wire   [63:0] zext_ln47_fu_485_p1;
reg   [63:0] zext_ln47_reg_676;
wire   [3:0] j_fu_500_p2;
reg   [3:0] j_reg_691;
wire    ap_CS_fsm_state53;
wire   [0:0] icmp_ln41_fu_506_p2;
wire   [0:0] icmp_ln39_fu_494_p2;
reg   [31:0] T_load_reg_711;
wire    ap_CS_fsm_state54;
reg   [31:0] V_load_reg_716;
wire   [31:0] aux_2_fu_535_p3;
wire    ap_CS_fsm_state63;
reg   [31:0] U_2_load_reg_726;
wire    ap_CS_fsm_state64;
reg   [31:0] tmp_9_reg_736;
reg   [31:0] I_load_reg_746;
wire    ap_CS_fsm_state74;
reg   [3:0] x_0_reg_180;
reg   [3:0] i_0_reg_192;
wire    ap_CS_fsm_state44;
reg   [3:0] x_1_reg_203;
reg   [3:0] i_1_reg_214;
wire    ap_CS_fsm_state84;
reg   [3:0] y_0_reg_225;
reg   [31:0] aux_0_reg_237;
reg   [3:0] j_0_reg_249;
reg   [31:0] aux_1_reg_260;
wire   [63:0] zext_ln25_fu_361_p1;
wire   [63:0] zext_ln43_fu_525_p1;
wire   [63:0] zext_ln43_1_fu_530_p1;
reg   [31:0] grp_fu_272_p0;
reg   [31:0] grp_fu_272_p1;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state79;
reg   [31:0] grp_fu_278_p0;
reg   [31:0] grp_fu_278_p1;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_288_p0;
wire    ap_CS_fsm_state14;
wire   [2:0] trunc_ln25_fu_343_p1;
wire   [5:0] zext_ln19_fu_327_p1;
wire   [5:0] add_ln25_fu_355_p2;
wire   [5:0] zext_ln21_fu_366_p1;
wire   [5:0] add_ln27_fu_388_p2;
wire   [31:0] bitcast_ln27_fu_398_p1;
wire   [31:0] xor_ln27_fu_402_p2;
wire   [2:0] trunc_ln43_1_fu_469_p1;
wire   [5:0] add_ln47_fu_481_p2;
wire   [5:0] zext_ln39_fu_490_p1;
wire   [5:0] add_ln43_fu_512_p2;
wire   [11:0] add_ln43_2_fu_517_p4;
reg   [1:0] grp_fu_272_opcode;
reg   [83:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 84'd1;
end

hopfield_routing_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hopfield_routing_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_272_p0),
    .din1(grp_fu_272_p1),
    .opcode(grp_fu_272_opcode),
    .ce(1'b1),
    .dout(grp_fu_272_p2)
);

hopfield_routing_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hopfield_routing_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_278_p0),
    .din1(grp_fu_278_p1),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

hopfield_routing_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hopfield_routing_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(reg_320),
    .ce(1'b1),
    .dout(grp_fu_283_p2)
);

hopfield_routing_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hopfield_routing_eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_288_p0),
    .ce(1'b1),
    .dout(grp_fu_288_p1)
);

hopfield_routing_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hopfield_routing_eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B),
    .ce(1'b1),
    .dout(grp_fu_292_p1)
);

hopfield_routing_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hopfield_routing_eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C),
    .ce(1'b1),
    .dout(grp_fu_295_p1)
);

hopfield_routing_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hopfield_routing_fYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_314),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        aux_0_reg_237 <= aux_1_reg_260;
    end else if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln34_fu_441_p2 == 1'd0))) begin
        aux_0_reg_237 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln37_fu_457_p2 == 1'd0))) begin
        aux_1_reg_260 <= aux_0_reg_237;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        aux_1_reg_260 <= aux_2_fu_535_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln19_fu_331_p2 == 1'd0))) begin
        i_0_reg_192 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        i_0_reg_192 <= i_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln32_fu_413_p2 == 1'd0))) begin
        i_1_reg_214 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        i_1_reg_214 <= i_2_reg_653;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln37_fu_457_p2 == 1'd0))) begin
        j_0_reg_249 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        j_0_reg_249 <= j_reg_691;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        x_0_reg_180 <= x_reg_565;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_0_reg_180 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_441_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        x_1_reg_203 <= x_2_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        x_1_reg_203 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        y_0_reg_225 <= y_reg_666;
    end else if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln34_fu_441_p2 == 1'd0))) begin
        y_0_reg_225 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        I_load_reg_746 <= I_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        T_load_reg_711 <= T_q0;
        V_load_reg_716 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        U_2_load_reg_726 <= U_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln19_fu_331_p2 == 1'd0))) begin
        V_addr_reg_575 <= zext_ln25_fu_361_p1;
        shl_ln_reg_570[5 : 3] <= shl_ln_fu_347_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_2_reg_653 <= i_2_fu_447_p2;
        zext_ln34_reg_645[3 : 0] <= zext_ln34_fu_437_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_583 <= i_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln21_fu_370_p2 == 1'd0))) begin
        icmp_ln23_reg_588 <= icmp_ln23_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (icmp_ln39_fu_494_p2 == 1'd0))) begin
        icmp_ln41_reg_696 <= icmp_ln41_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        j_reg_691 <= j_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_303 <= grp_fu_288_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_309 <= U_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state58) & (icmp_ln41_reg_696 == 1'd0)))) begin
        reg_314 <= grp_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state78))) begin
        reg_320 <= grp_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln32_fu_413_p2 == 1'd0))) begin
        shl_ln1_reg_640[5 : 3] <= shl_ln1_fu_429_p3[5 : 3];
        trunc_ln47_reg_635 <= trunc_ln47_fu_425_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln37_fu_457_p2 == 1'd0))) begin
        shl_ln2_reg_671[5 : 3] <= shl_ln2_fu_473_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_2_reg_617 <= grp_fu_292_p1;
        tmp_3_reg_622 <= grp_fu_295_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tmp_8_reg_612 <= grp_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        tmp_9_reg_736 <= grp_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_i_i_reg_607 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln34_fu_441_p2 == 1'd0))) begin
        trunc_ln43_reg_658 <= trunc_ln43_fu_453_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        x_2_reg_630 <= x_2_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_reg_565 <= x_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        y_reg_666 <= y_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln21_fu_370_p2 == 1'd0) & (icmp_ln23_fu_382_p2 == 1'd0))) begin
        zext_ln27_reg_592[5 : 0] <= zext_ln27_fu_393_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_457_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        zext_ln47_reg_676[5 : 0] <= zext_ln47_fu_485_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        I_ce0 = 1'b1;
    end else begin
        I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        T_ce0 = 1'b1;
    end else begin
        T_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        U_0_ce0 = 1'b1;
    end else begin
        U_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        U_0_we0 = 1'b1;
    end else begin
        U_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        U_1_address0 = zext_ln47_reg_676;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        U_1_address0 = zext_ln27_fu_393_p1;
    end else begin
        U_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state67))) begin
        U_1_ce0 = 1'b1;
    end else begin
        U_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        U_2_ce0 = 1'b1;
    end else begin
        U_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        V_address0 = zext_ln43_1_fu_530_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        V_address0 = zext_ln27_reg_592;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        V_address0 = V_addr_reg_575;
    end else begin
        V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state8))) begin
        V_ce0 = 1'b1;
    end else begin
        V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        V_d0 = tmp_8_reg_612;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        V_d0 = 32'd0;
    end else begin
        V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state44) & (icmp_ln23_reg_588 == 1'd0)) | ((icmp_ln23_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln21_fu_370_p2 == 1'd0)))) begin
        V_we0 = 1'b1;
    end else begin
        V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_272_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state74) | ((1'b1 == ap_CS_fsm_state59) & (icmp_ln41_reg_696 == 1'd0)))) begin
        grp_fu_272_opcode = 2'd0;
    end else begin
        grp_fu_272_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state74))) begin
        grp_fu_272_p0 = reg_320;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_272_p0 = reg_309;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_272_p0 = aux_1_reg_260;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_272_p0 = tmp_i_i_reg_607;
    end else begin
        grp_fu_272_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_272_p1 = tmp_9_reg_736;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state74))) begin
        grp_fu_272_p1 = reg_314;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_272_p1 = 32'd1065353216;
    end else begin
        grp_fu_272_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_278_p0 = tmp_3_reg_622;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_278_p0 = reg_303;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_278_p0 = tmp_2_reg_617;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_278_p0 = T_load_reg_711;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_278_p0 = bitcast_ln27_1_fu_408_p1;
    end else begin
        grp_fu_278_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_278_p1 = I_load_reg_746;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_278_p1 = U_2_load_reg_726;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_278_p1 = aux_0_reg_237;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_278_p1 = V_load_reg_716;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_278_p1 = reg_303;
    end else begin
        grp_fu_278_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_288_p0 = A;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_288_p0 = l;
    end else begin
        grp_fu_288_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln19_fu_331_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln21_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((icmp_ln23_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln21_fu_370_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln32_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((icmp_ln34_fu_441_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln37_fu_457_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((icmp_ln39_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_address0 = zext_ln47_reg_676;

assign T_address0 = zext_ln43_fu_525_p1;

assign U_0_address0 = zext_ln47_reg_676;

assign U_0_d0 = reg_320;

assign U_2_address0 = zext_ln47_fu_485_p1;

assign add_ln25_fu_355_p2 = (shl_ln_fu_347_p3 + zext_ln19_fu_327_p1);

assign add_ln27_fu_388_p2 = (zext_ln21_fu_366_p1 + shl_ln_reg_570);

assign add_ln43_2_fu_517_p4 = {{{trunc_ln47_reg_635}, {trunc_ln43_reg_658}}, {add_ln43_fu_512_p2}};

assign add_ln43_fu_512_p2 = (zext_ln39_fu_490_p1 + shl_ln2_reg_671);

assign add_ln47_fu_481_p2 = (shl_ln1_reg_640 + zext_ln34_reg_645);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign aux_2_fu_535_p3 = ((icmp_ln41_reg_696[0:0] === 1'b1) ? aux_1_reg_260 : grp_fu_272_p2);

assign bitcast_ln27_1_fu_408_p1 = xor_ln27_fu_402_p2;

assign bitcast_ln27_fu_398_p1 = reg_309;

assign i_2_fu_447_p2 = (i_1_reg_214 + 4'd1);

assign i_fu_376_p2 = (i_0_reg_192 + 4'd1);

assign icmp_ln19_fu_331_p2 = ((x_0_reg_180 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_370_p2 = ((i_0_reg_192 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_382_p2 = ((x_0_reg_180 == i_0_reg_192) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_413_p2 = ((x_1_reg_203 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_441_p2 = ((i_1_reg_214 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_457_p2 = ((y_0_reg_225 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_494_p2 = ((j_0_reg_249 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_506_p2 = ((y_0_reg_225 == j_0_reg_249) ? 1'b1 : 1'b0);

assign j_fu_500_p2 = (j_0_reg_249 + 4'd1);

assign shl_ln1_fu_429_p3 = {{trunc_ln47_fu_425_p1}, {3'd0}};

assign shl_ln2_fu_473_p3 = {{trunc_ln43_1_fu_469_p1}, {3'd0}};

assign shl_ln_fu_347_p3 = {{trunc_ln25_fu_343_p1}, {3'd0}};

assign trunc_ln25_fu_343_p1 = x_0_reg_180[2:0];

assign trunc_ln43_1_fu_469_p1 = y_0_reg_225[2:0];

assign trunc_ln43_fu_453_p1 = i_1_reg_214[2:0];

assign trunc_ln47_fu_425_p1 = x_1_reg_203[2:0];

assign x_2_fu_419_p2 = (x_1_reg_203 + 4'd1);

assign x_fu_337_p2 = (x_0_reg_180 + 4'd1);

assign xor_ln27_fu_402_p2 = (bitcast_ln27_fu_398_p1 ^ 32'd2147483648);

assign y_fu_463_p2 = (y_0_reg_225 + 4'd1);

assign zext_ln19_fu_327_p1 = x_0_reg_180;

assign zext_ln21_fu_366_p1 = i_0_reg_192;

assign zext_ln25_fu_361_p1 = add_ln25_fu_355_p2;

assign zext_ln27_fu_393_p1 = add_ln27_fu_388_p2;

assign zext_ln34_fu_437_p1 = i_1_reg_214;

assign zext_ln39_fu_490_p1 = j_0_reg_249;

assign zext_ln43_1_fu_530_p1 = add_ln43_fu_512_p2;

assign zext_ln43_fu_525_p1 = add_ln43_2_fu_517_p4;

assign zext_ln47_fu_485_p1 = add_ln47_fu_481_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_570[2:0] <= 3'b000;
    zext_ln27_reg_592[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    shl_ln1_reg_640[2:0] <= 3'b000;
    zext_ln34_reg_645[5:4] <= 2'b00;
    shl_ln2_reg_671[2:0] <= 3'b000;
    zext_ln47_reg_676[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //hopfield_routing
