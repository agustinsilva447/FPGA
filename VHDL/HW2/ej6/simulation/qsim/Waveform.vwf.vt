// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/20/2021 12:21:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ej6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ej6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg clk;
reg [7:0] d;
reg enable;
reg ld;
reg up_down;
// wires                                               
wire [7:0] qa;
wire [7:0] qb;
wire [7:0] qc;
wire [7:0] qd;
wire [7:0] qe;
wire [7:0] qf;
wire [7:0] qg;
wire [7:0] qh;
wire [7:0] qi;
wire [7:0] qj;
wire [7:0] qk;
wire [7:0] ql;
wire [7:0] qm;
wire [7:0] qn;

// assign statements (if any)                          
ej6 i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.clk(clk),
	.d(d),
	.enable(enable),
	.ld(ld),
	.qa(qa),
	.qb(qb),
	.qc(qc),
	.qd(qd),
	.qe(qe),
	.qf(qf),
	.qg(qg),
	.qh(qh),
	.qi(qi),
	.qj(qj),
	.qk(qk),
	.ql(ql),
	.qm(qm),
	.qn(qn),
	.up_down(up_down)
);
initial 
begin 
#1000000 $finish;
end 

// clear
initial
begin
	clear = 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b0;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b0;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b0;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
end 

// ld
initial
begin
	ld = 1'b0;
end 

// up_down
initial
begin
	up_down = 1'b0;
end 
endmodule

