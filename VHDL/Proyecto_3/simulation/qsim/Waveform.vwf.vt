// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/01/2021 15:13:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bcd2bin
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bcd2bin_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] bcd;
reg c0;
reg c1;
reg c2;
reg ninicio;
reg reloj;
// wires                                               
wire [7:0] bin;
wire fin;

// assign statements (if any)                          
bcd2bin i1 (
// port map - connection between master ports and signals/registers   
	.bcd(bcd),
	.bin(bin),
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.fin(fin),
	.ninicio(ninicio),
	.reloj(reloj)
);
initial 
begin 
#1000000 $finish;
end 

// reloj
always
begin
	reloj = 1'b0;
	reloj = #2500 1'b1;
	#2500;
end 

// ninicio
initial
begin
	ninicio = 1'b1;
	ninicio = #80000 1'b0;
	ninicio = #30000 1'b1;
	ninicio = #180000 1'b0;
	ninicio = #20000 1'b1;
	ninicio = #170000 1'b0;
	ninicio = #20000 1'b1;
end 

// c0
initial
begin
	c0 = 1'b1;
	c0 = #30000 1'b0;
	c0 = #20000 1'b1;
end 

// c1
initial
begin
	c1 = 1'b1;
	c1 = #190000 1'b0;
	c1 = #20000 1'b1;
end 

// c2
initial
begin
	c2 = 1'b1;
	c2 = #360000 1'b0;
	c2 = #20000 1'b1;
end 

// bcd[7]
initial
begin
	bcd[7] = 1'b1;
	bcd[7] = #230000 1'b0;
end 

// bcd[6]
initial
begin
	bcd[6] = 1'b0;
	bcd[6] = #230000 1'b1;
	bcd[6] = #220000 1'b0;
end 

// bcd[5]
initial
begin
	bcd[5] = 1'b0;
end 

// bcd[4]
initial
begin
	bcd[4] = 1'b0;
	bcd[4] = #230000 1'b1;
end 

// bcd[3]
initial
begin
	bcd[3] = 1'b0;
end 

// bcd[2]
initial
begin
	bcd[2] = 1'b0;
end 

// bcd[1]
initial
begin
	bcd[1] = 1'b1;
	bcd[1] = #450000 1'b0;
end 

// bcd[0]
initial
begin
	bcd[0] = 1'b0;
	bcd[0] = #230000 1'b1;
end 
endmodule

