-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crazyFunction is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    x_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_EN_A : OUT STD_LOGIC;
    x_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    x_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    x_Clk_A : OUT STD_LOGIC;
    x_Rst_A : OUT STD_LOGIC;
    res_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_EN_A : OUT STD_LOGIC;
    res_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    res_Clk_A : OUT STD_LOGIC;
    res_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of crazyFunction is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crazyFunction,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.665000,HLS_SYN_LAT=3901,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=2973,HLS_SYN_LUT=5289,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal y : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_2_ce0 : STD_LOGIC;
    signal second_order_float_2_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_3_ce0 : STD_LOGIC;
    signal second_order_float_3_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_s_ce0 : STD_LOGIC;
    signal second_order_float_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_read_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_fu_311_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_reg_1042 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln12_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_1047 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal x_load_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal results_sign_V_1_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_V_fu_333_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1068 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_343_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_1075 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln601_fu_382_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln601_reg_1092 : STD_LOGIC_VECTOR (3 downto 0);
    signal Med_V_reg_1097 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln833_1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_24_reg_1123 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln_i_i_reg_1129 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_25_fu_450_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_25_reg_1134 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Val2_7_fu_465_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_reg_1140 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_zeros_V_fu_516_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_zeros_V_reg_1145 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_V_reg_1151 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal Ex_V_fu_553_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1158 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_577_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1168 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln833_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1174 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_626_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal B_V_fu_657_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_V_reg_1194 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_trunc_V_reg_1199 : STD_LOGIC_VECTOR (14 downto 0);
    signal B_squared_V_reg_1219 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal t1_V_reg_1224 : STD_LOGIC_VECTOR (28 downto 0);
    signal second_order_float_6_reg_1229 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_8_reg_1234 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln2_reg_1239 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln662_1_reg_1244 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln272_1_fu_751_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln272_1_reg_1249 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ret_V_fu_772_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_reg_1254 : STD_LOGIC_VECTOR (29 downto 0);
    signal result_V_reg_1259 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ret_V_10_fu_811_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_10_reg_1264 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln300_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1269 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_280_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_280_ap_done : STD_LOGIC;
    signal select_ln311_fu_947_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_reg_1274 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_11_fu_978_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_11_reg_1279 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_12_fu_994_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_12_reg_1284 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_280_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_280_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_280_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_0_reg_268 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_280_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln498_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_1_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal res_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_s_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln114_1_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_359_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_367_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln744_fu_386_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_9_fu_389_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_18_fu_405_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_419_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_419_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (103 downto 0);
    signal trunc_ln745_fu_456_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_460_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_i_i_i_fu_472_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_19_fu_482_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_s_fu_490_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_20_fu_500_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln114_fu_520_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1253_fu_532_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_V_10_fu_535_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln482_fu_525_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln655_fu_550_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1334_fu_559_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_571_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_598_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal lshr_ln1287_fu_604_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln1287_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_1_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1310_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_basis_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_i_fu_647_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_21_fu_677_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_11_fu_1020_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_12_fu_720_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_12_fu_720_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_12_fu_720_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_fu_1027_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_1_fu_757_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_1_fu_760_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_14_fu_763_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln657_fu_769_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_790_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_790_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_14_fu_790_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln272_fu_778_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_2_fu_807_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_20_fu_818_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_23_fu_844_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_850_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_888_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_fu_926_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_1_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_1_fu_965_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_2_fu_830_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln300_3_fu_986_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_3_fu_840_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_3_fu_1002_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_1007_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_11_fu_1020_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_fu_692_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_11_fu_1020_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_13_fu_1027_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_295_ce : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln10_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p00 : STD_LOGIC_VECTOR (103 downto 0);
    signal grp_fu_419_p10 : STD_LOGIC_VECTOR (103 downto 0);
    signal r_V_12_fu_720_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_fu_1027_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_790_p10 : STD_LOGIC_VECTOR (57 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (28 downto 0);
        prescale : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crazyFunction_fadfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crazyFunction_fmug8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crazyFunction_fsqhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crazyFunction_fexibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crazyFunction_muljbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (103 downto 0) );
    end component;


    component crazyFunction_muxkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crazyFunction_muxlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crazyFunction_mulmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component crazyFunction_mulncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component crazyFunction_refbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component crazyFunction_seccud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component crazyFunction_secdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component crazyFunction_seceOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component crazyFunction_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        y : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ref_4oPi_table_100_V_U : component crazyFunction_refbkb
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_2_U : component crazyFunction_seccud
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => second_order_float_2_address0,
        ce0 => second_order_float_2_ce0,
        q0 => second_order_float_2_q0);

    second_order_float_3_U : component crazyFunction_secdEe
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => second_order_float_3_address0,
        ce0 => second_order_float_3_ce0,
        q0 => second_order_float_3_q0);

    second_order_float_s_U : component crazyFunction_seceOg
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => second_order_float_s_address0,
        ce0 => second_order_float_s_ce0,
        q0 => second_order_float_s_q0);

    crazyFunction_CRTL_BUS_s_axi_U : component crazyFunction_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        y => y);

    grp_scaled_fixed2ieee_fu_280 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_scaled_fixed2ieee_fu_280_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_280_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_280_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_280_ap_ready,
        in_V => result_V_reg_1259,
        prescale => ret_V_10_reg_1264,
        ap_return => grp_scaled_fixed2ieee_fu_280_ap_return);

    crazyFunction_fadfYi_U3 : component crazyFunction_fadfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_286_p0,
        din1 => tmp_i_reg_1289,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p2);

    crazyFunction_fmug8j_U4 : component crazyFunction_fmug8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_5_reg_1299,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    crazyFunction_fsqhbi_U5 : component crazyFunction_fsqhbi
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => x_assign_reg_1118,
        ce => grp_fu_295_ce,
        dout => grp_fu_295_p2);

    crazyFunction_fexibs_U6 : component crazyFunction_fexibs
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => y_read_reg_1034,
        ce => ap_const_logic_1,
        dout => grp_fu_300_p2);

    crazyFunction_muljbC_U7 : component crazyFunction_muljbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 104)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_419_p0,
        din1 => grp_fu_419_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p2);

    crazyFunction_muxkbM_U8 : component crazyFunction_muxkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_25_reg_1134,
        dout => cos_basis_fu_626_p10);

    crazyFunction_muxlbW_U9 : component crazyFunction_muxlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_23_fu_844_p3,
        dout => tmp_fu_850_p18);

    crazyFunction_muxlbW_U10 : component crazyFunction_muxlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_23_fu_844_p3,
        dout => tmp_1_fu_888_p18);

    crazyFunction_mulmb6_U11 : component crazyFunction_mulmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_11_fu_1020_p0,
        din1 => r_V_11_fu_1020_p1,
        dout => r_V_11_fu_1020_p2);

    crazyFunction_mulncg_U12 : component crazyFunction_mulncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_13_fu_1027_p0,
        din1 => second_order_float_8_reg_1234,
        dout => r_V_13_fu_1027_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_fu_280_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_scaled_fixed2ieee_fu_280_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_scaled_fixed2ieee_fu_280_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_fu_280_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_fu_280_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    idx_0_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                idx_0_reg_268 <= idx_reg_1042;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_0_reg_268 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                B_V_reg_1194 <= B_V_fu_657_p1;
                B_trunc_V_reg_1199 <= select_ln1310_fu_619_p3(21 downto 7);
                cos_basis_reg_1187 <= cos_basis_fu_626_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                B_squared_V_reg_1219 <= r_V_11_fu_1020_p2(29 downto 15);
                second_order_float_6_reg_1229 <= second_order_float_3_q0;
                second_order_float_8_reg_1234 <= second_order_float_s_q0;
                t1_V_reg_1224 <= second_order_float_2_q0(29 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                Ex_V_reg_1158 <= Ex_V_fu_553_p2;
                Mx_V_reg_1151 <= r_V_10_fu_535_p2(57 downto 29);
                icmp_ln833_2_reg_1180 <= icmp_ln833_2_fu_590_p2;
                icmp_ln833_reg_1174 <= icmp_ln833_fu_585_p2;
                isNeg_reg_1163 <= Ex_V_fu_553_p2(7 downto 7);
                ush_reg_1168 <= ush_fu_577_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Med_V_reg_1097 <= r_V_9_fu_389_p2(99 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                Mx_zeros_V_reg_1145 <= Mx_zeros_V_fu_516_p1;
                p_Val2_25_reg_1134 <= p_Val2_25_fu_450_p3;
                p_Val2_7_reg_1140 <= p_Val2_7_fu_465_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_scaled_fixed2ieee_fu_280_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                and_ln300_reg_1269 <= and_ln300_fu_933_p2;
                ret_V_11_reg_1279 <= ret_V_11_fu_978_p3;
                ret_V_12_reg_1284 <= ret_V_12_fu_994_p3;
                select_ln311_reg_1274 <= select_ln311_fu_947_p3;
                tmp_i_reg_1289 <= grp_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                closepath_reg_1081 <= closepath_fu_347_p2;
                results_sign_V_1_reg_1062 <= p_Val2_s_fu_322_p1(31 downto 31);
                tmp_V_1_reg_1075 <= tmp_V_1_fu_343_p1;
                tmp_V_reg_1068 <= p_Val2_s_fu_322_p1(30 downto 23);
                trunc_ln601_reg_1092 <= trunc_ln601_fu_382_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln833_1_reg_1112 <= icmp_ln833_1_fu_425_p2;
                x_assign_reg_1118 <= grp_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                idx_reg_1042 <= idx_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_Val2_24_reg_1123 <= grp_fu_419_p2(76 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                result_V_reg_1259 <= r_V_14_fu_790_p2(57 downto 29);
                ret_V_10_reg_1264 <= ret_V_10_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                ret_V_reg_1254 <= ret_V_fu_772_p2;
                select_ln272_1_reg_1249 <= select_ln272_1_fu_751_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_5_reg_1299 <= grp_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_6_reg_1304 <= grp_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                trunc_ln2_reg_1239 <= r_V_12_fu_720_p2(44 downto 23);
                trunc_ln662_1_reg_1244 <= r_V_13_fu_1027_p2(29 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (closepath_reg_1081 = ap_const_lv1_0))) then
                trunc_ln_i_i_reg_1129 <= grp_fu_419_p2(79 downto 77);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                x_load_reg_1057 <= x_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                y_read_reg_1034 <= y;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    zext_ln12_reg_1047(6 downto 0) <= zext_ln12_fu_317_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_1047(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state22, grp_scaled_fixed2ieee_fu_280_ap_done, icmp_ln10_fu_305_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_scaled_fixed2ieee_fu_280_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    B_V_fu_657_p1 <= select_ln1310_fu_619_p3(22 - 1 downto 0);
    Ex_V_fu_553_p2 <= std_logic_vector(unsigned(select_ln482_fu_525_p3) - unsigned(zext_ln655_fu_550_p1));
    Mx_bits_V_1_fu_460_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(p_Val2_24_reg_1123));
    Mx_zeros_V_fu_516_p1 <= val_assign_fu_508_p3(5 - 1 downto 0);
    add_ln114_1_fu_353_p2 <= std_logic_vector(signed(ap_const_lv8_C2) + signed(tmp_V_fu_333_p4));
    add_ln114_fu_520_p2 <= std_logic_vector(signed(ap_const_lv8_83) + signed(tmp_V_reg_1068));
    addr_V_fu_359_p3 <= 
        ap_const_lv8_3F when (closepath_fu_347_p2(0) = '1') else 
        add_ln114_1_fu_353_p2;
    and_ln300_1_fu_955_p2 <= (icmp_ln833_reg_1174 and icmp_ln833_1_reg_1112);
    and_ln300_fu_933_p2 <= (icmp_ln833_reg_1174 and icmp_ln833_1_reg_1112);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_305_p2)
    begin
        if (((icmp_ln10_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_305_p2)
    begin
        if (((icmp_ln10_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    closepath_fu_347_p2 <= "1" when (unsigned(tmp_V_fu_333_p4) < unsigned(ap_const_lv8_7E)) else "0";
    grp_fu_286_p0 <= p_Result_24_fu_1007_p4;

    grp_fu_295_ce_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, grp_scaled_fixed2ieee_fu_280_ap_done, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((grp_scaled_fixed2ieee_fu_280_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            grp_fu_295_ce <= ap_const_logic_1;
        else 
            grp_fu_295_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_419_p0 <= grp_fu_419_p00(80 - 1 downto 0);
    grp_fu_419_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Med_V_reg_1097),104));
    grp_fu_419_p1 <= grp_fu_419_p10(24 - 1 downto 0);
    grp_fu_419_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_fu_405_p3),104));
    grp_scaled_fixed2ieee_fu_280_ap_start <= grp_scaled_fixed2ieee_fu_280_ap_start_reg;
    icmp_ln10_fu_305_p2 <= "1" when (idx_0_reg_268 = ap_const_lv7_64) else "0";
    icmp_ln833_1_fu_425_p2 <= "1" when (tmp_V_1_reg_1075 = ap_const_lv23_0) else "0";
    icmp_ln833_2_fu_590_p2 <= "1" when (tmp_V_reg_1068 = ap_const_lv8_FF) else "0";
    icmp_ln833_fu_585_p2 <= "1" when (tmp_V_reg_1068 = ap_const_lv8_0) else "0";
    idx_fu_311_p2 <= std_logic_vector(unsigned(idx_0_reg_268) + unsigned(ap_const_lv7_1));
    isNeg_fu_563_p3 <= Ex_V_fu_553_p2(7 downto 7);
        lhs_V_1_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_reg_1224),30));

    lshr_ln1287_fu_604_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1151),to_integer(unsigned('0' & sext_ln1311_1_fu_598_p1(29-1 downto 0)))));
    or_ln300_fu_973_p2 <= (icmp_ln833_2_reg_1180 or and_ln300_fu_933_p2);
    or_ln311_fu_942_p2 <= (select_ln271_fu_926_p3 or icmp_ln833_2_reg_1180);
    p_Repl2_3_fu_1002_p3 <= 
        results_sign_V_1_reg_1062 when (and_ln300_reg_1269(0) = '1') else 
        select_ln311_reg_1274;
    p_Result_18_fu_405_p3 <= (ap_const_lv1_1 & tmp_V_1_reg_1075);
    p_Result_19_fu_482_p3 <= (p_Result_i_i_i_fu_472_p4 & ap_const_lv1_1);
    p_Result_20_fu_500_p3 <= (ap_const_lv2_3 & p_Result_s_fu_490_p4);
    p_Result_21_fu_677_p3 <= (sin_basis_fu_671_p2 & p_Result_i_i_fu_647_p4);
    p_Result_22_fu_822_p3 <= p_Val2_20_fu_818_p1(31 downto 31);
    p_Result_23_fu_844_p3 <= (results_sign_V_1_reg_1062 & p_Val2_25_reg_1134);
    p_Result_24_fu_1007_p4 <= ((p_Repl2_3_fu_1002_p3 & ret_V_11_reg_1279) & ret_V_12_reg_1284);
    p_Result_i_i_fu_647_p4 <= select_ln1310_fu_619_p3(28 downto 22);
    p_Result_i_i_i_fu_472_p4 <= p_Val2_7_fu_465_p3(57 downto 29);
    
    p_Result_s_fu_490_p4_proc : process(p_Result_19_fu_482_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_s_fu_490_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_19_fu_482_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_s_fu_490_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_s_fu_490_p4_i) := p_Result_19_fu_482_p3(30-1-p_Result_s_fu_490_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_490_p4 <= resvalue(30-1 downto 0);
    end process;

    p_Val2_20_fu_818_p1 <= grp_scaled_fixed2ieee_fu_280_ap_return;
    p_Val2_25_fu_450_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1081(0) = '1') else 
        trunc_ln_i_i_reg_1129;
    p_Val2_7_fu_465_p3 <= 
        Mx_bits_V_1_fu_460_p2 when (trunc_ln745_fu_456_p1(0) = '1') else 
        p_Val2_24_reg_1123;
    p_Val2_s_fu_322_p1 <= x_load_reg_1057;
    r_V_10_fu_535_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_7_reg_1140),to_integer(unsigned('0' & zext_ln1253_fu_532_p1(31-1 downto 0)))));
    r_V_11_fu_1020_p0 <= r_V_fu_692_p1(15 - 1 downto 0);
    r_V_11_fu_1020_p1 <= r_V_fu_692_p1(15 - 1 downto 0);
    r_V_12_fu_720_p0 <= second_order_float_6_reg_1229;
    r_V_12_fu_720_p1 <= r_V_12_fu_720_p10(22 - 1 downto 0);
    r_V_12_fu_720_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1194),45));
    r_V_12_fu_720_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_12_fu_720_p0) * signed('0' &r_V_12_fu_720_p1))), 45));
    r_V_13_fu_1027_p0 <= r_V_13_fu_1027_p00(15 - 1 downto 0);
    r_V_13_fu_1027_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1219),30));
    r_V_14_fu_790_p0 <= ret_V_reg_1254;
    r_V_14_fu_790_p1 <= r_V_14_fu_790_p10(29 - 1 downto 0);
    r_V_14_fu_790_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln272_1_reg_1249),58));
    r_V_14_fu_790_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_14_fu_790_p0) * signed('0' &r_V_14_fu_790_p1))), 58));
    r_V_9_fu_389_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & zext_ln744_fu_386_p1(31-1 downto 0)))));
    r_V_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_V_reg_1199),30));
    ref_4oPi_table_100_V_address0 <= zext_ln498_fu_377_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_Addr_A <= std_logic_vector(shift_left(unsigned(res_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    res_Addr_A_orig <= zext_ln12_reg_1047(32 - 1 downto 0);
    res_Clk_A <= ap_clk;
    res_Din_A <= tmp_6_reg_1304;

    res_EN_A_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            res_EN_A <= ap_const_logic_1;
        else 
            res_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    res_Rst_A <= ap_rst_n_inv;

    res_WEN_A_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            res_WEN_A <= ap_const_lv4_F;
        else 
            res_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    ret_V_10_fu_811_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(rhs_V_2_fu_807_p1));
    ret_V_11_fu_978_p3 <= 
        select_ln300_1_fu_965_p3 when (or_ln300_fu_973_p2(0) = '1') else 
        tmp_V_2_fu_830_p4;
    ret_V_12_fu_994_p3 <= 
        select_ln300_3_fu_986_p3 when (or_ln300_fu_973_p2(0) = '1') else 
        tmp_V_3_fu_840_p1;
    ret_V_14_fu_763_p2 <= std_logic_vector(signed(lhs_V_1_fu_757_p1) + signed(rhs_V_1_fu_760_p1));
    ret_V_fu_772_p2 <= std_logic_vector(unsigned(ret_V_14_fu_763_p2) + unsigned(sext_ln657_fu_769_p1));
        rhs_V_1_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_1239),30));

        rhs_V_2_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln272_fu_778_p3),9));

    second_order_float_2_address0 <= zext_ln498_1_fu_685_p1(8 - 1 downto 0);

    second_order_float_2_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            second_order_float_2_ce0 <= ap_const_logic_1;
        else 
            second_order_float_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_3_address0 <= zext_ln498_1_fu_685_p1(8 - 1 downto 0);

    second_order_float_3_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            second_order_float_3_ce0 <= ap_const_logic_1;
        else 
            second_order_float_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_s_address0 <= zext_ln498_1_fu_685_p1(8 - 1 downto 0);

    second_order_float_s_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            second_order_float_s_ce0 <= ap_const_logic_1;
        else 
            second_order_float_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1310_fu_619_p3 <= 
        zext_ln1287_1_fu_609_p1 when (isNeg_reg_1163(0) = '1') else 
        shl_ln1253_fu_613_p2;
    select_ln271_fu_926_p3 <= 
        tmp_fu_850_p18 when (cos_basis_reg_1187(0) = '1') else 
        tmp_1_fu_888_p18;
    select_ln272_1_fu_751_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_reg_1187(0) = '1') else 
        Mx_V_reg_1151;
    select_ln272_fu_778_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1187(0) = '1') else 
        Ex_V_reg_1158;
    select_ln300_1_fu_965_p3 <= 
        ap_const_lv8_FF when (xor_ln300_fu_959_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln300_3_fu_986_p3 <= 
        ap_const_lv23_7FFFFF when (xor_ln300_fu_959_p2(0) = '1') else 
        ap_const_lv23_0;
    select_ln311_fu_947_p3 <= 
        xor_ln311_fu_937_p2 when (or_ln311_fu_942_p2(0) = '1') else 
        p_Result_22_fu_822_p3;
    select_ln482_fu_525_p3 <= 
        add_ln114_fu_520_p2 when (closepath_reg_1081(0) = '1') else 
        ap_const_lv8_0;
        sext_ln1311_1_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1168),29));

        sext_ln1311_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1168),32));

        sext_ln1334_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_553_p2),9));

        sext_ln657_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln662_1_reg_1244),30));

    shl_ln1253_fu_613_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1287_fu_601_p1),to_integer(unsigned('0' & sext_ln1311_fu_595_p1(31-1 downto 0)))));
    sin_basis_fu_671_p2 <= (cos_basis_fu_626_p10 xor ap_const_lv1_1);
    sub_ln1311_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln1334_fu_559_p1));
    tmp_7_fu_367_p4 <= addr_V_fu_359_p3(7 downto 4);
    tmp_V_1_fu_343_p1 <= p_Val2_s_fu_322_p1(23 - 1 downto 0);
    tmp_V_2_fu_830_p4 <= p_Val2_20_fu_818_p1(30 downto 23);
    tmp_V_3_fu_840_p1 <= p_Val2_20_fu_818_p1(23 - 1 downto 0);
    tmp_V_fu_333_p4 <= p_Val2_s_fu_322_p1(30 downto 23);
    trunc_ln601_fu_382_p1 <= addr_V_fu_359_p3(4 - 1 downto 0);
    trunc_ln745_fu_456_p1 <= p_Val2_25_fu_450_p3(1 - 1 downto 0);
    ush_fu_577_p3 <= 
        sub_ln1311_fu_571_p2 when (isNeg_fu_563_p3(0) = '1') else 
        sext_ln1334_fu_559_p1;
    
    val_assign_fu_508_p3_proc : process(p_Result_20_fu_500_p3)
    begin
        val_assign_fu_508_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_20_fu_500_p3(i) = '1' then
                val_assign_fu_508_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    x_Addr_A <= std_logic_vector(shift_left(unsigned(x_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    x_Addr_A_orig <= zext_ln12_fu_317_p1(32 - 1 downto 0);
    x_Clk_A <= ap_clk;
    x_Din_A <= ap_const_lv32_0;

    x_EN_A_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_EN_A <= ap_const_logic_1;
        else 
            x_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    x_Rst_A <= ap_rst_n_inv;
    x_WEN_A <= ap_const_lv4_0;
    xor_ln300_fu_959_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_955_p2);
    xor_ln311_fu_937_p2 <= (icmp_ln833_2_reg_1180 xor ap_const_lv1_1);
    zext_ln1253_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1145),58));
    zext_ln1287_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1287_fu_604_p2),32));
    zext_ln1287_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_reg_1151),32));
    zext_ln12_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_0_reg_268),64));
    zext_ln498_1_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_21_fu_677_p3),64));
    zext_ln498_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_367_p4),64));
    zext_ln655_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1145),8));
    zext_ln744_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln601_reg_1092),100));
end behav;
