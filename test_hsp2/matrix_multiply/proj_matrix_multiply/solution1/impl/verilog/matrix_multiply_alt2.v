// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_multiply_alt2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state18 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten14_reg_116;
reg   [1:0] Col_assign_2_reg_127;
reg   [3:0] indvar_flatten_reg_138;
reg   [1:0] Row_assign_reg_149;
reg   [1:0] Col_assign_reg_160;
wire   [0:0] icmp_ln318_fu_184_p2;
reg   [0:0] icmp_ln318_reg_406;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln318_reg_406_pp0_iter1_reg;
reg   [0:0] icmp_ln318_reg_406_pp0_iter2_reg;
reg   [0:0] icmp_ln318_reg_406_pp0_iter3_reg;
reg   [0:0] icmp_ln318_reg_406_pp0_iter4_reg;
reg   [0:0] icmp_ln318_reg_406_pp0_iter5_reg;
reg   [0:0] icmp_ln318_reg_406_pp0_iter6_reg;
wire   [4:0] add_ln318_fu_190_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] select_ln330_1_fu_228_p3;
reg   [0:0] select_ln330_1_reg_415;
reg   [0:0] select_ln330_1_reg_415_pp0_iter1_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter2_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter3_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter4_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter5_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter6_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter7_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter8_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter9_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter10_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter11_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter12_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter13_reg;
reg   [0:0] select_ln330_1_reg_415_pp0_iter14_reg;
wire   [0:0] select_ln330_2_fu_248_p3;
reg   [0:0] select_ln330_2_reg_419;
reg   [0:0] select_ln330_2_reg_419_pp0_iter1_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter2_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter3_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter4_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter5_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter6_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter7_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter8_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter9_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter10_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter11_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter12_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter13_reg;
reg   [0:0] select_ln330_2_reg_419_pp0_iter14_reg;
wire   [1:0] select_ln330_3_fu_256_p3;
reg   [1:0] select_ln330_3_reg_423;
wire   [1:0] select_ln332_fu_294_p3;
reg   [1:0] select_ln332_reg_430;
wire   [1:0] select_ln332_1_fu_302_p3;
reg   [1:0] select_ln332_1_reg_435;
wire   [1:0] c_fu_310_p2;
wire   [3:0] select_ln319_fu_322_p3;
wire   [4:0] add_ln335_fu_395_p2;
reg   [4:0] add_ln335_reg_462;
reg   [4:0] add_ln335_reg_462_pp0_iter2_reg;
reg   [4:0] add_ln335_reg_462_pp0_iter3_reg;
reg   [4:0] add_ln335_reg_462_pp0_iter4_reg;
reg   [4:0] add_ln335_reg_462_pp0_iter5_reg;
reg   [4:0] add_ln335_reg_462_pp0_iter6_reg;
reg   [3:0] C_addr_reg_477;
reg   [3:0] C_addr_reg_477_pp0_iter8_reg;
reg   [3:0] C_addr_reg_477_pp0_iter9_reg;
reg   [3:0] C_addr_reg_477_pp0_iter10_reg;
reg   [3:0] C_addr_reg_477_pp0_iter11_reg;
reg   [3:0] C_addr_reg_477_pp0_iter12_reg;
reg   [3:0] C_addr_reg_477_pp0_iter13_reg;
reg   [3:0] C_addr_reg_477_pp0_iter14_reg;
reg   [3:0] sum_mult_addr_reg_482;
reg   [3:0] sum_mult_addr_reg_482_pp0_iter8_reg;
reg   [3:0] sum_mult_addr_reg_482_pp0_iter9_reg;
reg   [3:0] sum_mult_addr_reg_482_pp0_iter10_reg;
reg   [3:0] sum_mult_addr_reg_482_pp0_iter11_reg;
reg   [3:0] sum_mult_addr_reg_482_pp0_iter12_reg;
reg   [3:0] sum_mult_addr_reg_482_pp0_iter13_reg;
reg   [3:0] sum_mult_addr_reg_482_pp0_iter14_reg;
wire   [31:0] grp_fu_177_p2;
reg   [31:0] mult_reg_488;
reg   [31:0] mult_reg_488_pp0_iter8_reg;
wire   [31:0] sum_mult_q0;
reg   [31:0] sum_mult_load_reg_493;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
wire   [3:0] sum_mult_address0;
reg    sum_mult_ce0;
reg    sum_mult_we0;
reg    sum_mult_ce1;
reg    sum_mult_we1;
reg   [1:0] ap_phi_mux_Col_assign_2_phi_fu_131_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_Row_assign_phi_fu_153_p4;
wire   [63:0] zext_ln60_3_fu_376_p1;
wire  signed [63:0] sext_ln60_fu_390_p1;
wire   [63:0] zext_ln335_fu_401_p1;
wire   [31:0] grp_fu_171_p2;
wire   [0:0] icmp_ln319_fu_202_p2;
wire   [1:0] k_fu_196_p2;
wire   [0:0] icmp_ln330_fu_216_p2;
wire   [0:0] icmp_ln330_1_fu_222_p2;
wire   [0:0] icmp_ln333_fu_236_p2;
wire   [0:0] icmp_ln333_1_fu_242_p2;
wire   [0:0] icmp_ln320_fu_270_p2;
wire   [0:0] xor_ln330_fu_264_p2;
wire   [1:0] select_ln330_fu_208_p3;
wire   [0:0] and_ln330_fu_276_p2;
wire   [0:0] or_ln332_fu_288_p2;
wire   [1:0] r_fu_282_p2;
wire   [3:0] add_ln319_fu_316_p2;
wire   [3:0] tmp_6_fu_333_p3;
wire   [4:0] zext_ln60_1_fu_340_p1;
wire   [4:0] zext_ln60_fu_330_p1;
wire   [3:0] tmp_1_fu_353_p3;
wire   [4:0] zext_ln60_2_fu_360_p1;
wire   [4:0] zext_ln332_fu_350_p1;
wire   [4:0] sub_ln60_1_fu_364_p2;
wire   [4:0] add_ln60_fu_370_p2;
wire   [4:0] zext_ln60_4_fu_381_p1;
wire   [4:0] sub_ln60_fu_344_p2;
wire   [4:0] add_ln60_1_fu_384_p2;
wire    ap_CS_fsm_state18;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

matrix_multiply_abkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sum_mult_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sum_mult_address0),
    .ce0(sum_mult_ce0),
    .we0(sum_mult_we0),
    .d0(grp_fu_177_p2),
    .q0(sum_mult_q0),
    .address1(sum_mult_addr_reg_482_pp0_iter14_reg),
    .ce1(sum_mult_ce1),
    .we1(sum_mult_we1),
    .d1(grp_fu_171_p2)
);

matrix_multiply_tcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_multiply_tcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_mult_load_reg_493),
    .din1(mult_reg_488_pp0_iter8_reg),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

matrix_multiply_tdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_multiply_tdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(B_q0),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln318_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Col_assign_2_reg_127 <= select_ln330_3_reg_423;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Col_assign_2_reg_127 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln318_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Col_assign_reg_160 <= c_fu_310_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Col_assign_reg_160 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln318_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Row_assign_reg_149 <= select_ln332_1_reg_435;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Row_assign_reg_149 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln318_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten14_reg_116 <= add_ln318_fu_190_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten14_reg_116 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln318_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_138 <= select_ln319_fu_322_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_138 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln318_reg_406_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        C_addr_reg_477 <= zext_ln335_fu_401_p1;
        mult_reg_488 <= grp_fu_177_p2;
        sum_mult_addr_reg_482 <= zext_ln335_fu_401_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        C_addr_reg_477_pp0_iter10_reg <= C_addr_reg_477_pp0_iter9_reg;
        C_addr_reg_477_pp0_iter11_reg <= C_addr_reg_477_pp0_iter10_reg;
        C_addr_reg_477_pp0_iter12_reg <= C_addr_reg_477_pp0_iter11_reg;
        C_addr_reg_477_pp0_iter13_reg <= C_addr_reg_477_pp0_iter12_reg;
        C_addr_reg_477_pp0_iter14_reg <= C_addr_reg_477_pp0_iter13_reg;
        C_addr_reg_477_pp0_iter8_reg <= C_addr_reg_477;
        C_addr_reg_477_pp0_iter9_reg <= C_addr_reg_477_pp0_iter8_reg;
        add_ln335_reg_462_pp0_iter2_reg <= add_ln335_reg_462;
        add_ln335_reg_462_pp0_iter3_reg <= add_ln335_reg_462_pp0_iter2_reg;
        add_ln335_reg_462_pp0_iter4_reg <= add_ln335_reg_462_pp0_iter3_reg;
        add_ln335_reg_462_pp0_iter5_reg <= add_ln335_reg_462_pp0_iter4_reg;
        add_ln335_reg_462_pp0_iter6_reg <= add_ln335_reg_462_pp0_iter5_reg;
        icmp_ln318_reg_406_pp0_iter2_reg <= icmp_ln318_reg_406_pp0_iter1_reg;
        icmp_ln318_reg_406_pp0_iter3_reg <= icmp_ln318_reg_406_pp0_iter2_reg;
        icmp_ln318_reg_406_pp0_iter4_reg <= icmp_ln318_reg_406_pp0_iter3_reg;
        icmp_ln318_reg_406_pp0_iter5_reg <= icmp_ln318_reg_406_pp0_iter4_reg;
        icmp_ln318_reg_406_pp0_iter6_reg <= icmp_ln318_reg_406_pp0_iter5_reg;
        mult_reg_488_pp0_iter8_reg <= mult_reg_488;
        select_ln330_1_reg_415_pp0_iter10_reg <= select_ln330_1_reg_415_pp0_iter9_reg;
        select_ln330_1_reg_415_pp0_iter11_reg <= select_ln330_1_reg_415_pp0_iter10_reg;
        select_ln330_1_reg_415_pp0_iter12_reg <= select_ln330_1_reg_415_pp0_iter11_reg;
        select_ln330_1_reg_415_pp0_iter13_reg <= select_ln330_1_reg_415_pp0_iter12_reg;
        select_ln330_1_reg_415_pp0_iter14_reg <= select_ln330_1_reg_415_pp0_iter13_reg;
        select_ln330_1_reg_415_pp0_iter2_reg <= select_ln330_1_reg_415_pp0_iter1_reg;
        select_ln330_1_reg_415_pp0_iter3_reg <= select_ln330_1_reg_415_pp0_iter2_reg;
        select_ln330_1_reg_415_pp0_iter4_reg <= select_ln330_1_reg_415_pp0_iter3_reg;
        select_ln330_1_reg_415_pp0_iter5_reg <= select_ln330_1_reg_415_pp0_iter4_reg;
        select_ln330_1_reg_415_pp0_iter6_reg <= select_ln330_1_reg_415_pp0_iter5_reg;
        select_ln330_1_reg_415_pp0_iter7_reg <= select_ln330_1_reg_415_pp0_iter6_reg;
        select_ln330_1_reg_415_pp0_iter8_reg <= select_ln330_1_reg_415_pp0_iter7_reg;
        select_ln330_1_reg_415_pp0_iter9_reg <= select_ln330_1_reg_415_pp0_iter8_reg;
        select_ln330_2_reg_419_pp0_iter10_reg <= select_ln330_2_reg_419_pp0_iter9_reg;
        select_ln330_2_reg_419_pp0_iter11_reg <= select_ln330_2_reg_419_pp0_iter10_reg;
        select_ln330_2_reg_419_pp0_iter12_reg <= select_ln330_2_reg_419_pp0_iter11_reg;
        select_ln330_2_reg_419_pp0_iter13_reg <= select_ln330_2_reg_419_pp0_iter12_reg;
        select_ln330_2_reg_419_pp0_iter14_reg <= select_ln330_2_reg_419_pp0_iter13_reg;
        select_ln330_2_reg_419_pp0_iter2_reg <= select_ln330_2_reg_419_pp0_iter1_reg;
        select_ln330_2_reg_419_pp0_iter3_reg <= select_ln330_2_reg_419_pp0_iter2_reg;
        select_ln330_2_reg_419_pp0_iter4_reg <= select_ln330_2_reg_419_pp0_iter3_reg;
        select_ln330_2_reg_419_pp0_iter5_reg <= select_ln330_2_reg_419_pp0_iter4_reg;
        select_ln330_2_reg_419_pp0_iter6_reg <= select_ln330_2_reg_419_pp0_iter5_reg;
        select_ln330_2_reg_419_pp0_iter7_reg <= select_ln330_2_reg_419_pp0_iter6_reg;
        select_ln330_2_reg_419_pp0_iter8_reg <= select_ln330_2_reg_419_pp0_iter7_reg;
        select_ln330_2_reg_419_pp0_iter9_reg <= select_ln330_2_reg_419_pp0_iter8_reg;
        sum_mult_addr_reg_482_pp0_iter10_reg <= sum_mult_addr_reg_482_pp0_iter9_reg;
        sum_mult_addr_reg_482_pp0_iter11_reg <= sum_mult_addr_reg_482_pp0_iter10_reg;
        sum_mult_addr_reg_482_pp0_iter12_reg <= sum_mult_addr_reg_482_pp0_iter11_reg;
        sum_mult_addr_reg_482_pp0_iter13_reg <= sum_mult_addr_reg_482_pp0_iter12_reg;
        sum_mult_addr_reg_482_pp0_iter14_reg <= sum_mult_addr_reg_482_pp0_iter13_reg;
        sum_mult_addr_reg_482_pp0_iter8_reg <= sum_mult_addr_reg_482;
        sum_mult_addr_reg_482_pp0_iter9_reg <= sum_mult_addr_reg_482_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln318_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln335_reg_462 <= add_ln335_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln318_reg_406 <= icmp_ln318_fu_184_p2;
        icmp_ln318_reg_406_pp0_iter1_reg <= icmp_ln318_reg_406;
        select_ln330_1_reg_415_pp0_iter1_reg <= select_ln330_1_reg_415;
        select_ln330_2_reg_419_pp0_iter1_reg <= select_ln330_2_reg_419;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln318_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln330_1_reg_415 <= select_ln330_1_fu_228_p3;
        select_ln330_2_reg_419 <= select_ln330_2_fu_248_p3;
        select_ln332_reg_430 <= select_ln332_fu_294_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln318_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln330_3_reg_423 <= select_ln330_3_fu_256_p3;
        select_ln332_1_reg_435 <= select_ln332_1_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln330_1_reg_415_pp0_iter7_reg == 1'd0))) begin
        sum_mult_load_reg_493 <= sum_mult_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (select_ln330_2_reg_419_pp0_iter14_reg == 1'd1) & (select_ln330_1_reg_415_pp0_iter14_reg == 1'd0))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln318_fu_184_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_reg_406 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_Col_assign_2_phi_fu_131_p4 = select_ln330_3_reg_423;
    end else begin
        ap_phi_mux_Col_assign_2_phi_fu_131_p4 = Col_assign_2_reg_127;
    end
end

always @ (*) begin
    if (((icmp_ln318_reg_406 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_Row_assign_phi_fu_153_p4 = select_ln332_1_reg_435;
    end else begin
        ap_phi_mux_Row_assign_phi_fu_153_p4 = Row_assign_reg_149;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (select_ln330_1_reg_415_pp0_iter6_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (select_ln330_1_reg_415_pp0_iter6_reg == 1'd0)))) begin
        sum_mult_ce0 = 1'b1;
    end else begin
        sum_mult_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        sum_mult_ce1 = 1'b1;
    end else begin
        sum_mult_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (select_ln330_1_reg_415_pp0_iter6_reg == 1'd1))) begin
        sum_mult_we0 = 1'b1;
    end else begin
        sum_mult_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (select_ln330_2_reg_419_pp0_iter14_reg == 1'd0) & (select_ln330_1_reg_415_pp0_iter14_reg == 1'd0))) begin
        sum_mult_we1 = 1'b1;
    end else begin
        sum_mult_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln318_fu_184_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln318_fu_184_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln60_3_fu_376_p1;

assign B_address0 = sext_ln60_fu_390_p1;

assign C_address0 = C_addr_reg_477_pp0_iter14_reg;

assign C_d0 = grp_fu_171_p2;

assign add_ln318_fu_190_p2 = (indvar_flatten14_reg_116 + 5'd1);

assign add_ln319_fu_316_p2 = (indvar_flatten_reg_138 + 4'd1);

assign add_ln335_fu_395_p2 = (zext_ln60_4_fu_381_p1 + sub_ln60_1_fu_364_p2);

assign add_ln60_1_fu_384_p2 = (zext_ln60_4_fu_381_p1 + sub_ln60_fu_344_p2);

assign add_ln60_fu_370_p2 = (zext_ln60_fu_330_p1 + sub_ln60_1_fu_364_p2);

assign and_ln330_fu_276_p2 = (xor_ln330_fu_264_p2 & icmp_ln320_fu_270_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_310_p2 = (select_ln332_fu_294_p3 + 2'd1);

assign icmp_ln318_fu_184_p2 = ((indvar_flatten14_reg_116 == 5'd27) ? 1'b1 : 1'b0);

assign icmp_ln319_fu_202_p2 = ((indvar_flatten_reg_138 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln320_fu_270_p2 = ((Col_assign_reg_160 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln330_1_fu_222_p2 = ((ap_phi_mux_Col_assign_2_phi_fu_131_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln330_fu_216_p2 = ((k_fu_196_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln333_1_fu_242_p2 = ((ap_phi_mux_Col_assign_2_phi_fu_131_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln333_fu_236_p2 = ((k_fu_196_p2 == 2'd2) ? 1'b1 : 1'b0);

assign k_fu_196_p2 = (ap_phi_mux_Col_assign_2_phi_fu_131_p4 + 2'd1);

assign or_ln332_fu_288_p2 = (icmp_ln319_fu_202_p2 | and_ln330_fu_276_p2);

assign r_fu_282_p2 = (select_ln330_fu_208_p3 + 2'd1);

assign select_ln319_fu_322_p3 = ((icmp_ln319_fu_202_p2[0:0] === 1'b1) ? 4'd1 : add_ln319_fu_316_p2);

assign select_ln330_1_fu_228_p3 = ((icmp_ln319_fu_202_p2[0:0] === 1'b1) ? icmp_ln330_fu_216_p2 : icmp_ln330_1_fu_222_p2);

assign select_ln330_2_fu_248_p3 = ((icmp_ln319_fu_202_p2[0:0] === 1'b1) ? icmp_ln333_fu_236_p2 : icmp_ln333_1_fu_242_p2);

assign select_ln330_3_fu_256_p3 = ((icmp_ln319_fu_202_p2[0:0] === 1'b1) ? k_fu_196_p2 : ap_phi_mux_Col_assign_2_phi_fu_131_p4);

assign select_ln330_fu_208_p3 = ((icmp_ln319_fu_202_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_Row_assign_phi_fu_153_p4);

assign select_ln332_1_fu_302_p3 = ((and_ln330_fu_276_p2[0:0] === 1'b1) ? r_fu_282_p2 : select_ln330_fu_208_p3);

assign select_ln332_fu_294_p3 = ((or_ln332_fu_288_p2[0:0] === 1'b1) ? 2'd0 : Col_assign_reg_160);

assign sext_ln60_fu_390_p1 = $signed(add_ln60_1_fu_384_p2);

assign sub_ln60_1_fu_364_p2 = (zext_ln60_2_fu_360_p1 - zext_ln332_fu_350_p1);

assign sub_ln60_fu_344_p2 = (zext_ln60_1_fu_340_p1 - zext_ln60_fu_330_p1);

assign sum_mult_address0 = zext_ln335_fu_401_p1;

assign tmp_1_fu_353_p3 = {{select_ln332_1_reg_435}, {2'd0}};

assign tmp_6_fu_333_p3 = {{select_ln330_3_reg_423}, {2'd0}};

assign xor_ln330_fu_264_p2 = (icmp_ln319_fu_202_p2 ^ 1'd1);

assign zext_ln332_fu_350_p1 = select_ln332_1_reg_435;

assign zext_ln335_fu_401_p1 = add_ln335_reg_462_pp0_iter6_reg;

assign zext_ln60_1_fu_340_p1 = tmp_6_fu_333_p3;

assign zext_ln60_2_fu_360_p1 = tmp_1_fu_353_p3;

assign zext_ln60_3_fu_376_p1 = add_ln60_fu_370_p2;

assign zext_ln60_4_fu_381_p1 = select_ln332_reg_430;

assign zext_ln60_fu_330_p1 = select_ln330_3_reg_423;

endmodule //matrix_multiply_alt2
